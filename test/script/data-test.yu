
val hard-scopes : List Ty
let => cons Ty Ty (nil-extra Ty)
where
  val test : List' Ty
  let => (); unit-elem; nil' Ty
  where
    val List' : Ty
    let => Ty
  end

  val unit-elem : {}
  let => ()

  val test' : List' (Opt(Ty))
  let => cons' (Opt(Ty)) (some ([] -> Opt({})) Ty) (nil'(Opt(Ty)))

end
data List' : Ty -> Ty
| nil' : (A : Ty) -> List'(A)
| cons' : (A : Ty) & A & List'(A) -> List'(A)

data List : Ty -> Ty
| nil-extra : (A : Ty) -> List(A)
| nil : (A : Ty) -> List(A)
| cons : A & (A : Ty) & List(A) -> List(A)

data Opt : Ty -> Ty
| none : (A : Ty) -> Opt(A)
| some : A & (A : Ty) -> Opt(A)

val emptyList : List(Ty)
let => nil(Ty)

data Nat : Ty
| 0 : Nat
| inc : Nat -> Nat

data Vec : Ty -> Nat -> Ty
| vnil : (A : Ty) -> Vec(A)(0)
| vcons : (A : Ty) -> A & Vec(A)(n) & (n : Nat) -> Vec(A)(inc(n))

val empty-vec : Vec(Nat)(0)
let => vnil(Nat)

val singleton-vec : Vec {} (inc 0)
let => vcons {} () (vnil {}) 0

import yu/prelude
of (...)

val main : {} ->> {}
let () =>
  test-io-in-case1(true);
  test-io-in-case2(true);
  test-io-in-case3(true);
  test-io-in-lambda1(true);
  test-io-in-lambda2(true);
  test-io-in-lambda3(true);
  test-pass-io-fun1();
  test-pass-io-fun2(true);
  test-coerce-io-fun1();
  test-coerce-io-fun2();
  test-io-application1(true);
  test-io-lambda(true)

val test-io-in-case1 : Bool ->> {}
let true => ()
let false => `A .print

val test-io-in-case2 : Bool ->> {}
let b =>
  case b
  of true => ()
  of false => `B .print
  end

val test-io-in-case3 : Bool ->> {}
let (b) =>
  case b
  of true => ()
  of false => ()
  end

val test-io-in-lambda1 : Bool ->> {}
let => _ => `A .print

val test-io-in-lambda2 : Bool ->> {}
let => b =>
  case b
  of true => `A .print
  of false => `B .print
  end

val test-io-in-lambda3 : Bool ->> {}
let => _ => ()

val test-pass-io-fun1 : {} ->> {}
let () => take-io test-io-in-case1

val test-pass-io-fun2 : Bool ->> {}
let b =>
  take-io
    case b
    of true => test-io-in-case1
    of false => test-io-in-case3
    end

val test-coerce-io-fun1 : {} ->> {}
let () => take-io (b => dummy b)
where
  val dummy : Bool -> {}
  let _ => ()
end

val take-io : (Bool ->> {}) ->> {}
let (f) => f true

val test-coerce-io-fun2 : {} ->> {}
let () => take-higher-io (f => dummy f)
where
  val dummy : (Bool ->> {}) -> {}
  let _ => ()
end

val take-higher-io : ((Bool ->> {}) ->> {}) ->> {}
let (f) => f test-io-in-case1

val test-io-application1 : Bool ->> {}
let (b) => dummy(test-io-in-lambda2 b)
where
  val dummy : {} -> {}
  let (()) => ()
end

val test-io-lambda : Bool ->> {}
let (b) =>
  ((b : Bool) => case b of true => `A .print of false => `B .print end) b

val test-effect-type1 : Bool ->> Ty
let true => `A .print; Bool
let b => test-io-lambda b; {}

val test-effect-type2 : (b : Bool) ->> Ty
let (b) =>
  Bool & test-effect-type1(b) -> \ `A .print; {}

val test-effect-type3 : {} ->> {}
let () =>
  f := ((x : const [B := (_) => Bool ->> Ty] Bool test-effect-type2) => x);
  case f true
  of true => ()
  of false => `F .print; ()
  end
where
  val const[A : Ty] [B : A -> Ty] : (a : A) -> B a -> A
  let (a) => _ => a
end

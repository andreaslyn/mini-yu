
data (*#Ty) : Ty & Ty -> Ty
of ($#) [A B : Ty] : A & B -> A * B


data Bool : Ty
of ff : Bool
of tt : Bool


val (*#Bool) : Bool & ([] -> Bool) -> Bool
let ff _ => ff
let tt b => b []


data (=#)[A B : Ty] : A & B -> Ty
of refl [A : Ty] [a : A] : a = a


val (.op*IsCommutative#Bool) : (a b : Bool) -> a * b = b * a
let tt tt => refl
let tt ff => refl
let ff tt => refl
let ff ff => refl


val (.op*IsCommutative'#Bool) : (a : Bool) & (b : Bool) -> a * b = b * a
let => (a b : Bool) => a .op*IsCommutative b


val desugarArrow [A : Ty] [B : A & A -> Ty] :
  ((a1 a2 : A) -> B a1 a2) = ((x : A) & (y : A) -> B x y)
let => refl


val desugarFun [A : Ty] [B : (_ _ : A) -> Ty] :
  ((a1 a2 : A) => B a1 a2) = ((x : A) (y : A) => B x y)
let => refl


data Nat : Ty
of 0 : Nat

data Vec : {} -> {} -> Nat & Ty -> Ty
of vnil : (A : Ty) -> ((Vec ()) ()) 0 A

data Id : (A : Ty) & A & A -> Ty
of refl : (A : Ty) & (x : A) -> Id A x x

val id-list-vec : (A : Ty) & Id Ty (((Vec ()) ()) n Ty) (((Vec ()) ()) n (((Vec ()) ()) n A)) & (n : Nat) -> Nat
let A {} n

import Fun => yu0/Fun
| id
| _@#

import Id => yu0/Id
| _=#

import Sigma => yu0/Sigma
| (&:#Ty)
| _$#

import N => yu0/Nat
| Nat
| ...#Nat

import List => yu0/List
| ...

val id2[A : Ty] : A -> A -> A
let =>
  f := (x => y => y);
  f

val evens : List(Nat) -> List(Nat)
let (xs) =>
  fold xs nil of n m =>
    case m
    | nil => _::.yu0/List n nil
    | _ => _::.List#List.List n m
    end

val fold' [A : Ty] [B : Ty] : (A & B -> B) & List(A) & B -> B
let f xs y => fold xs y f

val evens' : List(Nat) -> List(Nat)
let (xs) =>
  r := fold'(n m =>
    case m
    | nil => _:: n nil
    | _ => _:: n m
    end) xs nil;
  r

val test1 : Nat -> &: id[A := Ty]
let (n) => IsArg n n $ isArg n n 1.Id

data IsArg : Nat & Nat -> Ty
| isArg : (m : Nat) & (n : Nat) & n = m -> IsArg m n

val.. list-len [A : Ty] : List(A) -> Nat
let =>
  tl := ((f : List(A) -> Nat) (xs : List(A)) =>
    case xs
    | nil => 0.N
    | _ :: xs => f(xs)
    end);
  aux := ((xs : List(A)) =>
    case xs
    | nil => 0.N
    | _:: x xs => tl ((++) @ list-len) (_:: x xs)
    end);
  aux


data Id : (A : Ty) & A & A -> Ty
| refl : (A : Ty) & (a : A) -> Id A a a

data Nat : Ty
| 0 : Nat
| (++#Nat) : Nat -> Nat

val (+#) : Nat & Nat -> Nat
let m 0 => m
let m (++ n) => ++ (m + n)

val 1 : Nat
let => ++(0)

val 2 : Nat
let => ++(1)

val 3 : Nat
let => ++(2)

val 4 : Nat
let => ++(3)

val 2+2=4 : Id Nat (2 + 2) 4
let => refl Nat 4

val Id-ap :
  (A : Ty) & (B : Ty) & (f : A -> B) & (a1 : A) & (a2 : A) & Id A a1 a2 ->
  Id B (f a1) (f a2)
let A B f a _ (refl _ _) => refl B (f a)

val 0+simpl : (n : Nat) -> Id Nat ((+) 0 n) n
let (0) => refl Nat 0
let (++(n)) => Id-ap Nat Nat (++) ((+) 0 n) n (0+simpl n)


val Id-sym : (A : Ty) & (a1 : A) & (a2 : A) & Id A a1 a2 -> Id A a2 a1
let A a _ (refl _ _) => refl A a

val pp-p-simpl :
  (m : Nat) & (n : Nat) -> Id Nat ((+) (++ m) n) (++ (+) m n)
let m 0 => refl Nat (++ m)
let m (++ n) =>
  Id-ap Nat Nat (++) ((+) (++ m) n) (++ (+) m n) (pp-p-simpl m n)

val Id-trans :
  (A : Ty) & (a1 : A) & (a2 : A) & (a3 : A) & Id A a1 a2 & Id A a2 a3 ->
  Id A a1 a3
let A a _ _ (refl _ _) (refl _ _) => refl A a

val comm-+ : (m : Nat) & (n : Nat) -> Id Nat (m + n) ((+) n m)
let m 0 => Id-sym Nat ((+) 0 m) m (0+simpl m)
let m (++ n) =>
  Id-trans Nat (++((+) m n)) (++(n + m)) (++ n + m)
    (Id-ap Nat Nat (++) ((+) m n) ((+) n m) (comm-+ m n))
    (Id-sym Nat ((+) (++ n) m) (++ (+) n m) (pp-p-simpl n m))

val (+'#Nat) : Nat & Nat -> Nat
let 0 n => n
let (++ m) n => ++ (m +' n)

val ppId : (m : Nat) & (n : Nat) -> Id Nat ((+') m n) ((+) m n)
let 0 n => Id-sym Nat ((+) 0 n) n (0+simpl n)
let (++ m) n =>
  Id-trans Nat (++((+') m n)) (++((+) m n)) ((+) (++(m)) n)
    (Id-ap Nat Nat (++) ((+') m n) ((+) m n) (ppId m n))
    (Id-sym Nat ((+) (++ m) n) (++ (+) m n) (pp-p-simpl m n))

val (*#Nat) : Nat & Nat -> Nat
let m n =>
  r := case n
    | 0 => 0
    | ++ n => m + m * n
    end;
  r

val 2*2=4 : Id Nat (++ ++ ++ ++ 0) ((*) (++ ++ 0) (++ ++ 0))
let => refl Nat (++ ++ 0 * ++ ++ 0)

val test-id-trans-case :
  (A : Ty) & (x : A) & (y : A) & (z : A) & Id A x y & Id A y z ->
  Id A x z
let A x y z e1 e2 =>
  case e1
  | refl _ _ =>
    case e2
    | refl _ _ => refl A x
    end
  end

val test-id-trans-assign :
  (T : Ty) & (x : T) & (y : T) & (z : T) & Id T x y & Id T y z ->
  Id T x x
let _ _ _ _ e1 e2 =>
  refl X a := e1; refl Y b := e2; refl Y a

data Empty : Ty | {}

val test-empty : Empty -> {}
let (e) =>
  case e | {} end

val test-empty' : Empty -> {}
let (e) =>
  case e
  | e => case e | {} end
  end

data Any : Ty
| any : (A : Ty) & A -> Any

val test-escape : {}
let =>
  a := any Nat 0;
  _ := (any X x := a; refl _ _ := refl X x; a);
  ()

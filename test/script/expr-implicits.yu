
data Nat : Ty
of 0 : Nat
of (+#Nat) : Nat -> Nat

val plus [m : Nat] [n : Nat] : Nat
let [n := 0] => m
let [n := +(n)] => +(plus [m := m] [n := n])

data Id [a1 : A'] [A' : Ty] [a2 : A'] : Ty
of refl [a : A] [A : Ty] : Id [a2 := a] [a1 := a]

val test-Id : Id [a1 := plus [n := +(+(0))] [m := +(0)]] [a2 := +(+(+(0)))]
let => refl [A := Nat] [a := +(+(+(0)))]

val test-Id2 : Id [a1 := plus [n := +(+(0))] [m := +(0)]] [a2 := +(+(0))] -> Nat
let ({})

val inc-1 [m : Nat] [n : Nat] : Nat
let [m := 0] [n := n] => +(0)
let [n := n] [m := +(m)] => +(+(m))

val test-Id3 : Id [a2 := inc-1 [n := 0] [m := +(0)]] [a1 := +(+(0))] [A' := Nat]
let => refl [a := +(+(0))]

val test-Id4 : Id [a2 := inc-1 [m := +(0)] [n := 0]] [a1 := +(0)] -> Nat
let {}

val test-Id5 [m : Nat] [n : Nat] [e1 : Id [a1 := m] [a2 := +(n)]] [e2 : Id [a1 := 0] [a2 := m]] : Nat
let [e2 := {}] [e1 := refl]

val test-Id6 [m : Nat] [n : Nat] [e1 : Id [a1 := m] [a2 := +(n)]] : Id [a1 := +(n)] [a2 := m]
let [e1 := refl] => refl [A := Nat]

val test-Id7 [m : Nat] [n : Nat] [e1 : Id [a1 := m] [a2 := +(n)]] : Id [a1 := +(n)] [a2 := m]
let [e1 := refl] => refl



data Nat : Ty
| 0 : Nat
| (++\Nat) : Nat -> Nat


data _.List\Ty : Ty -> Ty
| nil [A : Ty] : A .List
| _::\_.List\Ty[A : Ty] : A & A .List -> A .List


val id-F[F : Ty -> Ty] [A : Ty] : F A -> F A
let x => x


val test-id-F-List : {}
let =>
  _ := id-F(() :: nil);
  ()


data _.Vec\Ty : Ty & Nat -> Ty
| vnil[A : Ty] : A .Vec 0
| _::\_.Vec\Ty[A : Ty] [n : Nat] : A & A .Vec n -> A .Vec (++ n)


data _.IsTyTy\Ty : (Ty -> Ty) -> Ty
| mkIsTyTy[F : Ty -> Ty] : F .IsTyTy


val id-F-IsTyTy[F : Ty -> Ty] [A : Ty] : F A & F .IsTyTy -> F A
let x _ => x


val test-id-F-Vec : {}
let =>
  _ := id-F-IsTyTy (() :: vnil) (mkIsTyTy[F := xx => xx .Vec (++ 0)]);
  ()


data _.IsTyTy'\Ty : (Ty -> Ty) & Ty -> Ty
| mkIsTyTy'[F : Ty -> Ty] [A : Ty] : F .IsTyTy' A


val id-F-IsTyTy'1[F G : Ty -> Ty] [A B : Ty] : F A & G B & F .IsTyTy' (G A) & (G .IsTyTy) -> F A
let x _ _ _ => x


val id-F-IsTyTy'2[F G : Ty -> Ty] [A B : Ty] : F A & G A & F .IsTyTy & G .IsTyTy' (F B) -> F A
let x _ _ _ => x


val test-id-F-Vec' : {}
let =>
  _ := id-F-IsTyTy'1 (() :: vnil) (() :: vnil)
    (mkIsTyTy' [F := x0 => x0 .Vec (++ 0)] [A := {} .Vec (++ 0)])
    (mkIsTyTy [F := x1 => x1 .Vec (++ 0)]);
  _ := id-F-IsTyTy'2 (() :: vnil) (() :: vnil)
    (mkIsTyTy[F := x0 => x0 .Vec(++ 0)])
    (mkIsTyTy'[F := x1 => x1 .Vec(++ 0)] [A := {} .Vec(++ 0)]);
  ()


data _.IsTyTyTy\Ty : (Ty & Ty -> Ty) -> Ty
| mkIsTyTyTy[F : Ty & Ty -> Ty] : F .IsTyTyTy


val id-F-IsTyTyTy[F : Ty & Ty -> Ty] [A B : Ty] : F A B & F .IsTyTyTy -> F A B
let x _ => x


data _.PairList\Ty : Ty & Ty -> Ty
| pnil[A B : Ty] : A .PairList B
| pcons[A B : Ty] : A & B & A .PairList B -> A .PairList B


val test-id-F-PairList : {}
let =>
  _ := id-F-IsTyTyTy (pcons () () pnil) (mkIsTyTyTy[F := _.PairList\Ty]);
  ()


val id-F-IsTyTyTy2[F : Ty & Ty -> Ty] [A B : Ty] : F A B & F .IsTyTyTy & F B A -> F A B
let x _ _ => x


val test-id-F-List-Drop : {}
let =>
  _ := id-F-IsTyTyTy2 (() :: nil) (mkIsTyTyTy[F := _ B => B .List]) (0 :: nil);
  ()

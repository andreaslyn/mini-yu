
data.. Nat : Ty
let 0 : Nat
let p[n : Nat] : Nat

data.. Vec[n : Nat] : Ty -> Ty
let nil[A : Ty] : Vec[n := 0](A)
let cons[x : Nat] [A : Ty] [a : A] [t : Vec[n := x](A)] : Vec[n := p[n := x]](A)

val head2[A : Ty] [n : Nat] : Vec[n := p[n := n]](A) -> A
let (cons[t := cons[a := a']] [a := a] [x := p[n := _]]) => a'
let (cons[a := a] [x := 0]) => a

data Id[a2 : A] [a1 : A] [A : Ty] : Ty
let refl[A : Ty] [a : A] : Id[a2 := a] [a1 := a]

val 1 : Nat
let => p[n := 0]

val 2 : Nat
let => p[n := 1]

val 3 : Nat
let => p[n := 2]

val test-head2-1 : Id[a1 := head2(cons[t := nil] [a := 2])] [a2 := 2]
let => refl

val test-head2-2 : Id[a1 := head2(cons[a := 2] [t := cons[t := nil] [a := 3] [A := Nat] [x := 0]])] [a2 := 3]
let => refl

val test-head2-3
  : Id[a1 := head2(cons[a := 2] [t := cons[a := 3] [t := nil]])] [a2 := 2] -> Nat
let {}

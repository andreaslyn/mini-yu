
val test1 : {}
let => (x => x)()

val test2 : {}
let => (x y => unit-id x) () Ty
where
  val unit-id : {} -> {}
  let () => ()
end

val test3 : {}
let => (x => () := x; ()) ()

data Id [A : Ty] : A & A -> Ty
| refl [A : Ty] [a : A] : Id a a

data Nat : Ty
| 0 : Nat
| (++\) : Nat -> Nat

data ReflectNat : Nat -> Ty
| reflectNat : (n : Nat) -> ReflectNat n

val reflectPlus [m : Nat] [n : Nat]
  : ReflectNat(m) & ReflectNat(n) -> Nat
let [n := 0] _ _ => m
let [n := ++(n)] rm _ => ++ reflectPlus rm (reflectNat n)

val test-reflect-nat
  : Id (reflectPlus (reflectNat 0) (reflectNat 0)) 0
let => refl


val test1 : Unit
let => ((x). x)(unit)

val test2 : Unit
let => ((x, y). unit-id(x))(unit, Ty)
where
  val unit-id : Unit -> Unit
  let (unit) => unit
end

val test3 : Unit
let => ((x). (unit := x; unit))(unit)

data Id[A : Ty] : (A, A) -> Ty
let refl[A : Ty, a : A] : Id(a, a)

data Nat : Ty
let 0 : Nat
let (++_\) : Nat -> Nat

data ReflectNat : Nat -> Ty
let reflectNat : (n : Nat) -> ReflectNat(n)

val reflectPlus[m : Nat, n : Nat]
  : (ReflectNat(m), ReflectNat(n)) -> Nat
let [n := 0](_, _) => m
let [n := ++(n)](rm, _) => ++(reflectPlus(rm, reflectNat(n)))

val test-reflect-nat
  : Id(reflectPlus(reflectNat(0), reflectNat(0)), 0)
let => refl

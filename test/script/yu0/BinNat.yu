
import B+ => yu0/BinNat+
| Bin+

import N => yu0/Nat
| Nat
| (...#Nat)

data Bin : Ty
| 0 : Bin
| pos : Bin+ -> Bin

val 1 : Bin
let => pos(1.B+)

val 2 : Bin
let => pos(2.B+)

val 3 : Bin
let => pos(3.B+)

val 4 : Bin
let => pos(4.B+)

val 5 : Bin
let => pos(5.B+)

val 6 : Bin
let => pos(6.B+)

val 7 : Bin
let => pos(7.B+)

val 8 : Bin
let => pos(8.B+)

val 9 : Bin
let => pos(9.B+)

val 10 : Bin
let => pos(10.B+)

val inj-Bin-Nat : Bin -> Nat
let (0) => 0.N
let (pos(b)) => inj-Bin+-Nat.B+(b)

val (+#Bin) : Bin & Bin -> Bin
let b1 0 => b1
let 0 b2 => b2
let (pos b1) (pos b2) => pos (plus.B+ b1 b2)

val (*#Bin) : Bin & Bin -> Bin
let b1 0 => 0
let 0 b2 => 0
let (pos b1) (pos b2) => pos (mul.B+ b1 b2)

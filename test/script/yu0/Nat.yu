
import Id => yu0/Id
of (=#)
of (<>#)
of ap=
of trans
of resp
of sym

import Empty => yu0/Empty
of not

import Pr => yu0/Prod
of (...)

import B => yu0/Bool
of (...#Bool)
of Bool

data Nat : Ty
of 0 : Nat
of (++#Nat) : Nat -> Nat

val 1 : Nat
let => ++ 0

val 2 : Nat
let => ++ 1

val 3 : Nat
let => ++ 2

val 4 : Nat
let => ++ 3

val 5 : Nat
let => ++ 4

val 6 : Nat
let => ++ 5

val 7 : Nat
let => ++ 6

val 8 : Nat
let => ++ 7

val 9 : Nat
let => ++ 8

val 10 : Nat
let => ++ 9

val (+#Nat) : Nat & Nat -> Nat
let m 0 => m
let m (++ n) => ++ (m + n)

val (-#Nat) : Nat & Nat -> Nat
let 0 _ => 0
let m 0 => m
let (++ m) (++ n) => m - n

val succ-<>-0 : (n : Nat) -> ++ n <> 0
let n => p => case p of {} end

val plus0 : (n : Nat) -> n = 0 + n
let 0 => 1.Id
let (++ n) => ap= (plus0 n) (++)

val plus-comm : (m : Nat) & (n : Nat) -> m + n = n + m
let m 0 => plus0(m)
let m (++ n) =>
  trans (ap= (plus-comm m n) (++)) (plus-+ n m)

val plus-+ : (m : Nat) & (n : Nat) -> ++ (m + n) = ++ m + n
let m 0 => 1.Id
let m (++ n) => ap= (plus-+ m n) (++)

val plus-assoc
  : (k : Nat) & (m : Nat) & (n : Nat) ->
    k + m + n = k + (m + n)
let k m 0 => 1.Id
let k m (++ n) => ap= (plus-assoc k m n) (++)

val (*#Nat) : Nat & Nat -> Nat
let m 0 => 0
let m (++ n) => m + m * n

val mul0 : (n : Nat) -> 0 = 0 * n
let (0) => 1.Id
let (++ n) => trans (mul0 n) (plus0 (0 * n))

val mul1 : (n : Nat) -> n = 1 * n
let (0) => 1.Id
let (++ n) =>
  trans (ap= (mul1 n) (++)) (plus-comm (1 * n) 1)

val plus-plus-swap-12
  : (k : Nat) & (m : Nat) & (n : Nat) ->
    k + (m + n) = m + (k + n)
let k m n =>
  resp (plus-assoc k m n) (x => x = r) at
  rew.Id (plus-comm k m) (x => x + n = r) at
  rew.Id (plus-assoc m k n) (x => x = r) 1.Id
where
  val r : Nat
  let => m + (k + n)
end

val plus-plus-swap-23
  : (k : Nat) & (m : Nat) & (n : Nat) ->
    k + m + n = k + n + m
let k m n =>
  trans
    (plus-assoc k m n)
    (trans (ap= (plus-comm m n) (t => k + t)) (sym (plus-assoc k n m)))

val mul-comm : (m : Nat) & (n : Nat) -> m * n = n * m
let m 0 => mul0 m
let m (++ n) => trans t (mul-plus n m)
where
  val E : Ty
  let => m + m * n = m + n * m

  val x : m * n = n * m
  let => mul-comm m n

  val t : E
  let => ap= x (t => m + t)

  val mul-plus : (m : Nat) & (n : Nat) -> n + m * n = ++ m * n
  let m 0 => 1.Id
  let m (++ n) => trans help0 help1
  where
    val help0 : ++ n + (m + m * n) = ++ (m + m * n + n)
    let =>
      rew.Id
        (plus-comm (m + m * n) n)
        (x => ++ n + (m + m * n) = ++ x)
        (sym (plus-+ n (m + m * n)))

    val help1 : ++ (m + m * n + n) = ++ m + ++ m * n
    let =>
      rew.Id
        (plus-comm (m + m * n) n)
        (x => ++ x = ++ m + ++ m * n)
        help2

    val help2 : ++ (n + (m + m * n)) = ++ m + ++ m * n
    let =>
      rew.Id
        (plus-plus-swap-12 n m (m * n))
        (x => ++ x = ++ m + ++ m * n)
        help3

    val help3 : ++ (m + (n + m * n)) = ++ m + ++ m * n
    let =>
      rew.Id
        (mul-plus m n)
        (x => ++ (m + x) = ++ m + ++ m * n)
        help4

    val help4 : ++ (m + ++ m * n) = ++ m + ++ m * n
    let => plus-+ m (++ m * n)
  end
end

val divmod : Nat & Nat & Nat & Nat -> Nat && Nat
let 0 _ q u => q $ u
let (++ m) n q 0 => divmod m n (++ q) n
let (++ m) n q (++ u) => divmod m n q u

val (/#Nat) : Nat & Nat -> Nat
let _ 0 => 0
let m (++ n) => pr1.Pr (divmod m n 0 n)

val mod : Nat & Nat -> Nat
let _ 0 => 0
let m (++ n) => n - pr2.Pr (divmod m n 0 n)

val (.even#Nat) : Nat -> Bool
let 0 => true.B
let (++ 0) => false.B
let (++ ++ n) => n .even


val (@'#) [A : Ty] [B : Ty] [C : Ty]
  : (g : B -> C) & (f : A -> B) -> A -> C
let g f => a => g (f a)

val (.odd#Nat) : Nat -> Bool
let => (!) @' (.even#Nat)

val (<=n#Nat) : Nat & Nat -> Bool
let 0 _ => true.B
let (++ _) 0 => false.B
let (++ m) (++ n) => m <=n n

val (>=n#Nat) : Nat & Nat -> Bool
let m n => n <=n m

val (=n#Nat) : Nat & Nat -> Bool
let 0 0 => true.B
let (++ m) (++ n) => m =n n
let _ _ => false.B

data (<#Nat) : Nat & Nat -> Ty
of 0<++ : (n : Nat) -> 0 < ++ n
of rec< : (m : Nat) & (n : Nat) -> m < n -> ++ m < ++ n

val (>#Nat) : Nat & Nat -> Ty
let m n => n < m

val IsPrime : Nat -> Ty
let n => (n > 1) && not (&: primeProperty)
where
  val primeProperty : Nat && Nat -> Ty
  let (x $ y) => (x <> 1) && (y <> 1) && (x * y = n)
end

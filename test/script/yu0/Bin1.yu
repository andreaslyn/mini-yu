import List => yu0/List
| (...)

import Fun => yu0/Fun
| (...)

import Bool => yu0/Bool
| (...)

import Id => yu0/Id
| (=#)


val Bits : Ty
let => List(Bool)


data Bin1 : Ty
| bin+ : Bits -> Bin1


val bits : Bin1 -> Bits
let (bin+(bs)) => bs


val 1 : Bin1
let => bin+(nil)


val 2 : Bin1
let => bin+(false :: nil)


val 3 : Bin1
let => bin+(true :: nil)


val 4 : Bin1
let => bin+(false :: false :: nil)


val 5 : Bin1
let => bin+(true :: false :: nil)


val 6 : Bin1
let => bin+(false :: true :: nil)


val 7 : Bin1
let => bin+(true :: true :: nil)


val 8 : Bin1
let => bin+(false :: false :: false :: nil)


val 9 : Bin1
let => bin+(true :: false :: false :: nil)


val 10 : Bin1
let => bin+(false :: true :: false :: nil)


val (+#Bin1) : Bin1 & Bin1 -> Bin1
let => x y => bin+(bits(x) +aux bits(y))


val (++#Bin1) : Bin1 -> Bin1
let (bin+(bs)) => bin+(++aux bs)


val (++aux#List) : Bits -> Bits
let (nil) => false :: nil
let (false :: bs) => true :: bs
let (true :: bs) => false :: ++aux bs


val (+aux#List) : Bits & Bits -> Bits
let nil bs2 => ++aux bs2
let bs1 nil => ++aux bs1
let (false :: bs1) (b2 :: bs2) => b2 :: bs1 +aux bs2
let (true :: bs1) (false :: bs2) => true :: bs1 +aux bs2
let (true :: bs1) (true :: bs2) => false :: ++aux (bs1 +aux bs2)


val (*#Bin1) : Bin1 & Bin1 -> Bin1
let => x y => bin+(bits(x) *aux bits(y))


val (*aux#List) : Bits & Bits -> Bits
let bs1 nil => bs1
let bs1 (false :: bs2) => (false :: bs1) *aux bs2
let bs1 (true :: bs2) => bs1 +aux ((false :: bs1) *aux bs2)


val (--#Bin1) : Bin1 -> Bin1
let (bin+(b)) => bin+(--aux b)


val (--aux#List) : Bits -> Bits
let (nil) => nil
let (false :: nil) => nil
let (false :: bs) => true :: --aux bs
let (true :: bs) => false :: bs


val simpl-op++op--
  : (b : Bool) & (bs : Bits) ->
    ++ -- bin+(b :: bs) = bin+(b :: bs)
let b bs => ap=.Id (simpl-op++op--aux b bs) bin+


val simpl-op++op--aux
  : (b : Bool) & (bs : Bits) ->
    ++aux --aux (b :: bs) = b :: bs
let true bs => 1.Id
let false nil => 1.Id
let false (b :: bs) =>
  ap=.Id (simpl-op++op--aux b bs) of false :: _


val simpl-op--op++
  : (b : Bin1) -> -- ++ b = b
let (bin+(bs)) => ap=.Id (simpl-op--op++aux(bs)) bin+


val simpl-op--op++aux
  : (bs : Bits) -> --aux ++aux bs = bs
let nil => 1.Id
let (false :: _) => 1.Id
let (true :: nil) => 1.Id
let (true :: true :: bs) =>
  ap=.Id (simpl-op--op++aux(true :: bs)) of t => true :: t
let (true :: false :: bs) =>
  ap=.Id (simpl-op--op++aux(false :: bs)) of t => true :: t


val.. ind
  : (b : Bin1) & (P : Bin1 -> Ty) & P(1) &
      ((x : Bin1) & P(x) -> P (++ x)) -> P b
let (bin+ nil) P p1 _ => p1
let (bin+ (b :: bs)) P p1 pi =>
  h := ind c P p1 pi;
  resp.Id (simpl-op++op-- b bs) P (pi c h)
where
  val c : Bin1
  let => -- bin+ (b :: bs)
end


val rec[A : Ty] : (b : Bin1) & A & (Bin1 & A -> A) -> A
let b a0 ai => ind b (const A) a0 ai


data (<#Bin1) : Bin1 & Bin1 -> Ty
| len< [a : Bool] [as : Bits] : 1 < bin+ (a :: as)
| false< [as : Bits] : bin+ (false :: as) < bin+ (true :: as)
| step< [a : Bool] [as : Bits] [b : Bool] [bs : Bits]
  : bin+ as < bin+ bs -> bin+ (a :: as) < bin+ (b :: bs)

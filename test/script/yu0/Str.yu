
import List => yu0/List
| List
| ...#List

import Char => yu0/Char
| Char

import N => yu0/Nat
| Nat
| ...#Nat

import B => yu0/Bool
| Bool

val Str : Ty
let => List(Char)

val strToUpper : Str -> Str
let (s) => map.List s toUpperCase.Char

val strToLower : Str -> Str
let (s) => map.List s toLowerCase.Char

val.. natToStr : Nat -> Str
let (0.N) => '0.Char :: nil.List
let (++ 0.N) => '1.Char :: nil.List
let (++ ++ 0.N) => '2.Char :: nil.List
let (++ ++ ++ 0.N) => '3.Char :: nil.List
let (++ ++ ++ ++ 0.N) => '4.Char :: nil.List
let (++ ++ ++ ++ ++ 0.N) => '5.Char :: nil.List
let (++ ++ ++ ++ ++ ++ 0.N) => '6.Char :: nil.List
let (++ ++ ++ ++ ++ ++ ++ 0.N) => '7.Char :: nil.List
let (++ ++ ++ ++ ++ ++ ++ ++ 0.N) => '8.Char :: nil.List
let (++ ++ ++ ++ ++ ++ ++ ++ ++ 0.N) => '9.Char :: nil.List
let (n) =>
  x := n / 10.N;
  y := mod.N n 10.N;
  natToStr x :+: natToStr y

val listToStr[A : Ty] : List(A) & (A -> Str) -> Str
let xs f => fold.List (map.List xs f) nil.List (:+:)

val boolToStr : Bool -> Str
let true.B => 't.Char :: 'r.Char :: 'u.Char :: 'e.Char :: nil.List
let false.B => 'f.Char :: 'a.Char :: 'l.Char :: 's.Char :: 'e.Char :: nil.List


import List => yu0/List
| List
| nil
| (...#List)

import N => yu0/Nat
| Nat
| (...#Nat)

import B => yu0/Bool
| Bool
| true
| false

import Fun => yu0/Fun
| (@#)

import Id => yu0/Id
| (=#)
| rew
| trans

data Bin+ : Ty
| bin+ : List(Bool) -> Bin+

val list-Bin+ : Bin+ -> List(Bool)
let (bin+(bs)) => bs

val 1 : Bin+
let => bin+(nil)

val 2 : Bin+
let => bin+(false :: nil)

val 3 : Bin+
let => bin+(true :: nil)

val 4 : Bin+
let => bin+(false :: false :: nil)

val 5 : Bin+
let => bin+(true :: false :: nil)

val 6 : Bin+
let => bin+(false :: true :: nil)

val 7 : Bin+
let => bin+(true :: true :: nil)

val 8 : Bin+
let => bin+(false :: false :: false :: nil)

val 9 : Bin+
let => bin+(true :: false :: false :: nil)

val 10 : Bin+
let => bin+(false :: true :: false :: nil)

val plus : Bin+ & Bin+ -> Bin+
let => x y => bin+(aux-plus (list-Bin+ x) (list-Bin+ y))

val.. aux-plus : List(Bool) & List(Bool) -> List(Bool)
let nil nil => false :: nil
let nil (false :: bs2) => true :: bs2
let nil (true :: bs2) => false :: aux-plus nil bs2
let bs1 nil => aux-plus nil bs1
let (false :: bs1) (b2 :: bs2) => b2 :: aux-plus bs1 bs2
let (true :: bs1) (false :: bs2) => true :: aux-plus bs1 bs2
let (true :: bs1) (true :: bs2) =>
  false :: aux-plus nil (aux-plus bs1 bs2)

val inc : Bin+ -> Bin+
let => n => plus n 1

val mul : Bin+ & Bin+ -> Bin+
let => x y => bin+ of aux-mul (list-Bin+ x) (list-Bin+ y)

val aux-mul : List(Bool) & List(Bool) -> List(Bool)
let bs1 nil => bs1
let bs1 (false :: bs2) =>
  false :: aux-mul bs1 bs2
let bs1 (true :: bs2) =>
  aux-plus (false :: aux-mul bs1 bs2) bs1

val inj-Bin+-Nat : Bin+ -> Nat
let => aux-inj-Bin+-Nat @ list-Bin+

val aux-inj-Bin+-Nat : List(Bool) -> Nat
let (nil) => 1.N
let (false :: bs) => aux-inj-Bin+-Nat(bs) * 2.N
let (true :: bs) => ++ (aux-inj-Bin+-Nat(bs) * 2.N)

val.. aux-plus-inj-Bin+-Nat
  : (b1 : List(Bool)) & (b2 : List(Bool)) ->
    aux-inj-Bin+-Nat (aux-plus b1 b2)
    = aux-inj-Bin+-Nat b1 + aux-inj-Bin+-Nat b2
let nil nil =>
  1.Id
let nil (false :: bs2) =>
  plus-comm.N (aux-inj-Bin+-Nat(bs2) * 2.N) 1.N
let nil (true :: bs2) =>
  rew
    (aux-plus-inj-Bin+-Nat nil bs2)
    (x => x * 2.N = b)
    (rew
      (plus-comm.N 1.N a)
      (x => 1.N + a + x = b)
      (plus-assoc.N 1.N a (++ a)))
where
  val a : Nat
  let => aux-inj-Bin+-Nat(bs2)
  val b : Nat
  let => 1.N + ++ (a * 2.N)
end
let (b1 :: bs1) nil =>
  trans (aux-plus-inj-Bin+-Nat nil (b1 :: bs1)) (plus-comm.N 1.N a)
where
  val a : Nat
  let => aux-inj-Bin+-Nat(b1 :: bs1)
end
let (false :: bs1) (false :: bs2) =>
  rew
    (aux-plus-inj-Bin+-Nat bs1 bs2)
    (x => x * 2.N = a1 + a1 + (a2 + a2))
    (aux-plus-22-swap-23 a1 a2)
where
  val a1 : Nat
  let => aux-inj-Bin+-Nat(bs1)
  val a2 : Nat
  let => aux-inj-Bin+-Nat(bs2)
end
let (false :: bs1) (true :: bs2) =>
  rew
    (aux-plus-inj-Bin+-Nat bs1 bs2)
    (x => ++ (x * 2.N) = a1 + a1 + ++ (a2 + a2))
    (ap=.Id (aux-plus-22-swap-23 a1 a2) (++))
where
  val a1 : Nat
  let => aux-inj-Bin+-Nat(bs1)
  val a2 : Nat
  let => aux-inj-Bin+-Nat(bs2)
end
let (true :: bs1) (false :: bs2) =>
  rew
    (aux-plus-inj-Bin+-Nat bs1 bs2)
    (x => ++ (x * 2.N) = ++ (a1 + a1) + (a2 + a2))
    (trans
      (ap=.Id (aux-plus-22-swap-23 a1 a2) (++))
      (plus-+.N (a1 + a1) (a2 + a2)))
where
  val a1 : Nat
  let => aux-inj-Bin+-Nat(bs1)
  val a2 : Nat
  let => aux-inj-Bin+-Nat(bs2)
end
let (true :: bs1) (true :: bs2) =>
  rew
    (simpl (aux-plus bs1 bs2))
    (x => x * 2.N = pp)
    (rew
      (aux-plus-inj-Bin+-Nat bs1 bs2)
      (x => ++ x * 2.N = pp)
      (ap=.Id
        (trans
          (sym.Id (plus-+.N a12 a12))
          (trans
            (ap=.Id (aux-plus-22-swap-23 a1 a2) (++))
            (plus-+.N a11 a22)))
        (++)))
where
  val a1 : Nat
  let => aux-inj-Bin+-Nat(bs1)

  val a2 : Nat
  let => aux-inj-Bin+-Nat(bs2)

  val pp : Nat
  let => ++ (a1 + a1) + ++ (a2 + a2)

  val a12 : Nat
  let => a1 + a2

  val a11 : Nat
  let => a1 + a1

  val a22 : Nat
  let => a2 + a2

  val simpl
    : (bs : List(Bool)) ->
      aux-inj-Bin+-Nat(aux-plus nil bs) = ++ aux-inj-Bin+-Nat(bs)
  let (nil) => 1.Id
  let (false :: bs) => 1.Id
  let (true :: bs) =>
    rew
      (simpl(bs))
      (x => x * 2.N = ++ ++ (a * 2.N))
      (sym.Id (plus-+.N a (++ a)))
  where
    val a : Nat
    let => aux-inj-Bin+-Nat(bs)
  end
end

val aux-plus-22-swap-23
  : (a1 : Nat) & (a2 : Nat) ->
    a1 + a2 + (a1 + a2) = a1 + a1 + (a2 + a2)
let a1 a2 =>
  trans
    (plus-assoc.N a1 a2 (a1 + a2))
    (trans
      (ap=.Id (plus-plus-swap-12.N a2 a1 a2) (x => a1 + x))
      (sym.Id (plus-assoc.N a1 a1 (a2 + a2))))


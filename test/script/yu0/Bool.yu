
import Id => yu0/Id
of (=#)

data Bool : Ty
of true : Bool
of false : Bool

val (!#Bool) : Bool -> Bool
let true => false
let false => true

val (||#Bool) : Bool & ([] -> Bool) -> Bool
let true _ => true
let false b => b []

val (&&#Bool) : Bool & ([] -> Bool) -> Bool
let false _ => false
let true b => b []

data IfThen : Ty -> Ty
of (?then#Bool) [A : Ty] : Bool & ([] -> A) -> IfThen A

val (?else#IfThen) [A : Ty] : IfThen A & ([] -> A) -> A
let (true ?then f) _ => f []
let (false ?then _) g => g []

val (=b#Bool) : Bool & Bool -> Bool
let true true => true
let false false => true
let _ _ => false

val True : Bool -> Ty
let a => a = true

val Id-b->Id : (a : Bool) & (b : Bool) -> True (a =b b) -> a = b
let true true => _ => 1.Id
let false false => _ => 1.Id
let true false => c => case c of {} end
let false true => c => case c of {} end

val id->==b : (a : Bool) & (b : Bool) -> a = b -> True (a =b b)
let true b => e => case e of 1.Id => 1.Id end
let false b => e => resp.Id e (x => True(false =b x)) 1.Id

val involutionBnot : (b : Bool) -> ! ! b = b
let true => 1.Id
let false => 1.Id

val commutativeBor : (a : Bool) & (b : Bool) -> a || b = b || a
let true true => 1.Id
let true false => 1.Id
let false true => 1.Id
let false false => 1.Id

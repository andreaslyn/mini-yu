
import Fun => yu0/Fun
of (@#)

import Id => yu0/Id
of (=#)
of 1

data Wrap[A : Ty] : A -> Ty
of wrap[A : Ty] : (a : A) -> Wrap(a)

val veryWeakFunext [A : Ty] [B : A -> Ty]
  : (f : (a : A) -> B(a)) & (g : (a : A) -> B(a)) &
      (((a : A) -> Wrap(f a)) = ((a' : A) -> Wrap((g @ id.Fun) a'))) -> f = g
let f g 1 => 1

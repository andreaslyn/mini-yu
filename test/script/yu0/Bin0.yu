
import Bin1 => yu0/Bin1
| Bin1

import Empty => yu0/Empty
| (...)

import Fun => yu0/Fun
| (...)


data Bin0 : Ty
| 0 : Bin0
| pos : Bin1 -> Bin0


val 1 : Bin0
let => pos(1.Bin1)


val 2 : Bin0
let => pos(2.Bin1)


val 3 : Bin0
let => pos(3.Bin1)


val 4 : Bin0
let => pos(4.Bin1)


val 5 : Bin0
let => pos(5.Bin1)


val 6 : Bin0
let => pos(6.Bin1)


val 7 : Bin0
let => pos(7.Bin1)


val 8 : Bin0
let => pos(8.Bin1)


val 9 : Bin0
let => pos(9.Bin1)


val 10 : Bin0
let => pos(10.Bin1)


val (+++#Bin0) : Bin0 -> Bin1
let (0) => 1.Bin1
let (pos(b)) => ++.Bin1 b


val (++#Bin0) : Bin0 -> Bin0
let (b) => pos(+++ b)


val (---#Bin1) : Bin1 -> Bin0
let (bin+.Bin1(nil.yu0/List)) => 0
let (bin+.Bin1(bs)) => pos(--.Bin1#Bin1 bin+.Bin1(bs))


val (--#Bin0) : Bin0 -> Bin0
let (0) => 0
let (pos(bs)) => --- bs


val (+#Bin0) : Bin0 & Bin0 -> Bin0
let b1 0 => b1
let 0 b2 => b2
let (pos b1) (pos b2) => pos (b1 +.Bin1 b2)


val (*#Bin0) : Bin0 & Bin0 -> Bin0
let b1 0 => 0
let 0 b2 => 0
let (pos b1) (pos b2) => pos (b1 *.Bin1 b2)


val ind
  : (b : Bin0) & (P : Bin0 -> Ty) & P(0) &
      ((x : Bin0) & P x -> P (++ x)) -> P b
let 0 P a0 ai => a0
let (pos b) P a0 ai =>
  ind.Bin1 b (P @ pos) (ai 0 a0) of x a => ai (pos x) a


val rec [A : Ty] : (b : Bin0) & A & (Bin0 & A -> A) -> A
let n a0 ai => ind n (const A) a0 ai


val (<#Bin0) : Bin0 & Bin0 -> Ty
let _ 0 => Empty
let 0 (pos _) => {}
let (pos a) (pos b) => a <.Bin1 b

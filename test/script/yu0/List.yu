
import "Nat.yu"

data List : Ty -> Ty
let nil [A : Ty] : List A
let _::_\List [A : Ty] : A & List(A) -> List(A)

val len [A : Ty] : List(A) -> Nat
let (nil) => 0
let (_ :: xs) => ++ len xs

val map [A : Ty] [B : Ty] : List(A) & (A -> B) -> List(B)
let nil _ => nil
let (x :: xs) f => f x :: map xs f

val accum[A : Ty] [B : Ty] : List(B) & A & (A & B -> A) -> A
let nil a _ => a
let (x :: xs) a f => accum xs (f a x) f

val fold [A : Ty] [B : Ty] : List(B) & A & (B & A -> A) -> A
let nil a _ => a
let (x :: xs) a f => f x (fold xs a f)

val _:+:_\List[A : Ty] : List(A) & List(A) -> List(A)
let xs ys => fold xs ys (_::_)

val reverse [A : Ty] : List(A) -> List(A)
let xs => accum xs nil (a x => x :: a)

val reverse' [A : Ty] : List(A) -> List(A)
let => aux0(nil)
where
  val aux0 : List(A) -> List(A) -> List(A)
  let (a) => xs => aux a xs

  val aux : List(A) & List(A) -> List(A)
  let a nil => a
  let a (x :: xs) => aux (x :: a) xs
end

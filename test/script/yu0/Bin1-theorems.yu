import Bin1 => yu0/Bin1
| ...

import Prod => yu0/Prod
| ...

import Empty => yu0/Empty

import Id => yu0/Id
| _=#


val not-reflexive-op< [a : Bin1] : not.Empty (a < a)
let (step<.Bin1 h) => not-reflexive-op< h


val inj-bin+[a : Bits] [b : Bits] : bin+ a = bin+ b -> a = b
let 1.Id => 1.Id


val.. step-op++op< [b : Bin1]
  : (a : Bin1) & ++ a < b -> a < -- b
let a h => step-op++op< a h

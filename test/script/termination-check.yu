data Nat : Ty
of 0 : Nat
of (++#) : Nat -> Nat

data (.List#Ty) : Ty -> Ty
of nil[A : Ty] : A .List
of (::#.List#Ty) [A : Ty] : A & A .List -> A .List

val last-nat : Nat .List -> Nat
let nil => 0
let (x :: xs) =>
  case xs
  of nil => x
  of y :: ys => last-nat xs
  end

val last-nat' : Nat .List -> Nat
let nil => 0
let (x :: xs) =>
  case xs
  of nil => x
  of y :: ys => last-nat' (y :: ys)
  end

data (.Stream#Ty) : Ty -> Ty
of nils[A : Ty] : [] -> A .Stream
of (::#.Stream#Ty) [A : Ty] : ([] -> A) & ([] -> A .Stream) -> [] -> A .Stream

val last-nat-Stream : Nat .Stream -> Nat
let nils => 0
let (x :: xs) =>
  case xs []
  of nils => x
  of y :: ys => last-nat-Stream xs
  end

val last-nat'-Stream : Nat .Stream -> Nat
let nils => 0
let (x :: xs) =>
  case xs []
  of nils => x
  of y :: ys => last-nat'-Stream (y :: ys)
  end

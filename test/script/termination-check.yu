data Nat : Ty
let 0 : Nat
let (++_\) : Nat -> Nat

data _.List\Ty : Ty -> Ty
let nil[A : Ty] : A .List
let _::_\_.List\Ty[A : Ty] : A & A .List -> A .List

val last-nat.List : Nat .List -> Nat
let nil => 0
let (x :: xs) =>
  case xs
  | nil => x
  | y :: ys => last-nat.List xs
  end

val last-nat'.List : Nat .List -> Nat
let nil => 0
let (x :: xs) =>
  case xs
  | nil => x
  | y :: ys => last-nat'.List (y :: ys)
  end

data _.Stream\Ty : Ty -> Ty
let nils[A : Ty] : [] -> A .Stream
let _::_\_.Stream\Ty[A : Ty] : ([] -> A) & ([] -> A .Stream) -> [] -> A .Stream

val last-nat.Stream : Nat .Stream -> Nat
let nils => 0
let (x :: xs) =>
  case xs []
  | nils => x
  | y :: ys => last-nat.Stream xs
  end

val last-nat'.Stream : Nat .Stream -> Nat
let nils => 0
let (x :: xs) =>
  case xs []
  | nils => x
  | y :: ys => last-nat'.Stream (y :: ys)
  end

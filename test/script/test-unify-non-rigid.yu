
val (:!#Ty) : A & (A : Ty) -> A
let a A => a


data Nat : Ty
| 0 : Nat
| (++#Nat) : Nat -> Nat


val (+#Nat) : Nat & Nat -> Nat
let m 0 => m
let m (++ n) => ++ m + n


val Const-Unit : Nat -> Ty
let 0 => {}
let (++ _) => {}


val test-id[F : Nat -> Ty] [m : Nat] [n : Nat] : F (m + n) -> F (m + n)
let x => x


val use-test[n : Nat] : Const-Unit (n + 0) -> Const-Unit (n + 0)
let x => test-id(x)


data (&&#Ty) : Ty & Ty -> Ty
| ($#) [A : Ty] [B : Ty] : A & B -> A && B


val use-test-pair : Const-Unit (0 + ++ 0) && Const-Unit (++ 0 + ++ 0) -> Const-Unit 0
let (a $ b) => () := test-id a; test-id b

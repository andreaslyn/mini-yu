
data Nat : Ty
| 0 : Nat
| (+1\Nat) : Nat -> Nat

data NatId : Nat & Nat -> Ty
| nat-refl : (n : Nat) -> NatId n n

data Empty : Ty
| {}

val not-0-+1 : (n : Nat) & NatId 0 (+1 n) -> Nat
let _ {}
##let (_, nat-refl(x)) => 0


data _.List#Ty : Ty -> Ty
| nil [A : Ty] : A .List
| _::#_.List#Ty [A : Ty] : A & A .List -> A .List


data Bool : Ty
| false : Bool
| true : Bool


data Nat : Ty
| 0 : Nat
| (++#Nat) : Nat -> Nat


val _+#Nat : Nat & Nat -> Nat
let m 0 => m
let m (++ n) => ++ m + n


val _.ListType#Bool : (b : Bool) -> Ty
let (true) => Nat
let (false) => Nat .List


val sum : b .ListType & (b : Bool) -> Nat
let n true => n
let nil false => 0
let (n :: ns) false => n + sum ns false

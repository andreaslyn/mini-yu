
data (.List#Ty) : Ty -> Ty
of nil [A : Ty] : A .List
of (::#.List#Ty) [A : Ty] : A & A .List -> A .List


data Bool : Ty
of false : Bool
of true : Bool


data Nat : Ty
of 0 : Nat
of (++#Nat) : Nat -> Nat


val (+#Nat) : Nat & Nat -> Nat
let m 0 => m
let m (++ n) => ++ m + n


val (.ListType#Bool) : (b : Bool) -> Ty
let (true) => Nat
let (false) => Nat .List


val sum : b .ListType & (b : Bool) -> Nat
let n true => n
let nil false => 0
let (n :: ns) false => n + sum ns false

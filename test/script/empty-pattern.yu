
data Id : (A : Ty) & A & A -> Ty
of refl : (A : Ty) & (x : A) -> Id A x x

data Nat : Ty
of 0 : Nat
of (+1#Nat) : Nat -> Nat

data Vec : Ty -> Nat -> Ty
of vnil : (A : Ty) -> Vec(A)(0)

val test-absurd : (n : Nat) & Id Ty (Vec Nat \ +1 0) (Vec Nat \ +1 +1 n) -> Nat
let n {}

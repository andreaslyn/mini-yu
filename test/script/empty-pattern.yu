
data Id : (A : Ty, A, A) -> Ty
let refl : (A : Ty, x : A) -> Id(A, x, x)

data Nat : Ty
let 0 : Nat
let (+1_\Nat) : Nat -> Nat

data Vec : Ty -> Nat -> Ty
let vnil : (A : Ty) -> Vec(A)(0)

val test-absurd : (n : Nat, Id(Ty, Vec(Nat)(+1 0), Vec(Nat)(+1 +1 n))) -> Nat
let (n, ())

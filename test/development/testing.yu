import "First"
import "\n\n\\\"\t Hey"

data List : Ty -> Ty where
  val nil : (A : Ty) -> List(A)
  val cons : (A : Ty, A, List(A)) -> List(A)
end

val foldl : (A : Ty, B : Ty, xs : List(A), b : B, f : (B, A) -> B) -> List(B)
let foldl(A, B, xs, b, f) => fld(xs)
where
  val fld : List(A) -> B
  let fld(nil(_)) => b
  let fld(cons(_, x, xs)) => f(fdl(xs), x)
end

val concat : (A : Ty, List(A), List(A)) -> List(A)
let concat(A, xs, ys) =>
  xs' = xs;
  [] = ((x : {}). [])([]);
  xs' = xs;
  0;
  [] = print();
  print(xs');
  xs' = xs;
  c = `\n`;
  c = `\\`;
  c = `\t`;
  c = `a`;
  foo(:=);
  case xs
  of nil(_) => nil(A)
  of cons(_, x, xs) => cons(A, x, concat(A, xs, ys))
  end

val concat' : (A : Ty, List(A), List(A)) -> List(A)
let concat'(A, nil(_), ys) => ys
let concat'(A, cons(_, x, xs), ys) => cons(A, x, concat(A, xs, ys))

val concat-curry : (A : Ty) -> (_ : List(A), _ : List(A)) -> List(A)
let concat-curry(A) => (xs, ys : List(A)). concat(A, xs, ys)

val concat-curry1 : (A : Ty) -> (List(A), _ : List(A)) -> List(A)
let concat-curry1 => (A). (xs, ys). concat(A, xs, ys)

val concat-curry2 : (A : Ty) -> List(A) -> (_ : List(A)) -> List(A)
let concat-curry2(A) => (xs).(ys). concat(A, xs, ys)

val unit : {} -> {}
let unit(x) => [] = x; []

val test-absurd : (A, B, A : Ty, B : Ty) -> Nat
let test-absurd((), (), A, B) absurd
let test-absurd(a, b, A, B) =>
  case a
  of foo((), ()) absurd
  of bat(()) absurd
  of () =>
    case b
    of ctor(()) => () = foo; []
    of () absurd
    end
  end

val lazyTest : [] -> () -> Ty
let lazyTest => []. (). {}

val lazyTest2 : () -> {}
let lazyTest2() => f = []. []; f[]

import yu/prelude
of (...)


import N => yu/Nat


val boolToAscii : Bool -> Char
let true => `1
let false => `0

val (!'#Bool) : Bool -> Bool
let true => false
let false => true

val nat-package : Bool -> Bool
let true => even (plus 1 1)
where
  val 1 : Nat
  let => ++ 0.N

  val 2 : Nat
  let => ++ 1

  val plus : (() -> Nat) & (() -> Nat) -> Nat
  let m n => aux (n ())
  where
    val aux : Nat -> Nat
    let 0.N => m ()
    let (++ n) => ++ plus (m ()) n
  end

  val even : Nat -> Bool
  let 0.N => true
  let (++ 0.N) => false
  let (++ ++ n) => even n
end
let b => (odd ()) (plus 1 (plus 1 1))
where
  val 1 : Nat
  let => ++ 0.N

  val 2 : Nat
  let => ++ 1

  val plus : (() -> Nat) & (() -> Nat) -> Nat
  let m n => aux (n ())
  where
    val aux : Nat -> Nat
    let 0.N => m ()
    let (++ n) => ++ plus (m ()) n
  end

  val.. even : () -> Nat -> Bool
  let => n =>
    o := odd;
    case n
    of 0.N => !' b
    of ++ n => (o ()) n
    end

  val.. odd : () -> Nat -> Bool
  let =>
    e := even ();
    n =>
      case n
      of 0.N => b
      of ++ n => e n
      end
end

val main : {} ->> {}
let () =>
  boolToAscii (nat-package true) .print;
  boolToAscii (nat-package false) .print;
  `lf .print;
  lazy-print1 ();
  lazy-print2 ();
  lazy-print1 ();
  lazy-print2 ();
  "" .print
where
  val lazy-print1 : () ->> {}
  let => `1 .println

  val lazy-print2 : () ->> {}
  let => `2 .println
end

import yu/prelude
of (...)

import L => yu/List

import N => yu/Nat


extern (!#) : Bool ->> Bool


extern len : (A : Ty) & List A -> Nat


val main : {} ->> {}
let () =>
  case !# true
  of false => `1 .println
  of true => `0 .println
  end;
  case len Nat (0.N :: 0.N :: 0.N :: nil.L)
  of 0.N => "0\n" .print
  of _ => "1\n" .print
  end

import yu/prelude
| (...)

import L => yu/List
| List
| (...#List)

import N => yu/Nat
| Nat


extern (!#) : Bool ->> Bool


extern len : (A : Ty) & List A -> Nat


val main : {} ->> {}
let () =>
  case !# true
  | false => '1 .println
  | true => '0 .println
  end;
  case len Nat (0.N :: 0.N :: 0.N :: nil.L)
  | 0.N => "0\n" .print
  | _ => "1\n" .print
  end

import yu/prelude
| (...)

import Stream => yu/Stream
| Stream
| (...#Stream)

import N => yu/Nat


val gen-stream : Nat -> [] -> Stream Nat
let 0.N => 0.N :: nil.Stream
let (++ n) => ++ n :: gen-stream n

val 100 : Nat
let => 10.N * 10.N

val 1000 : Nat
let => 100 * 10.N

val 10000 : Nat
let => 1000 * 10.N

val 100000 : Nat
let => 10000 * 10.N

val 1000000 : Nat
let => 100000 * 10.N

val 3000000 : Nat
let => 1000000 * 3.N

val streamFirstAndLast' : Stream Nat -> Nat && Nat
let nil.Stream => 0.N $ 0.N
let (x :: xs) =>
  case xs []
  | nil.Stream => x $ x
  | _ :: _ => x $ streamLast xs
  end
where
  val streamLast : Stream Nat -> Nat
  let nil.Stream => 0.N
  let (x :: xs) =>
    case xs []
    | nil.Stream => x
    | _ :: _ => streamLast xs
    end
end

val streamFirstAndLast : ([] -> Stream Nat) -> Nat && Nat
let s => streamFirstAndLast' s

val sreverse' [A : Ty] : Stream A -> [] -> Stream A
let => aux0 nil.Stream
where
  val aux0 : ([] -> Stream A) -> Stream A -> [] -> Stream A
  let a => xs => aux a xs

  val aux : ([] -> Stream A) & Stream A -> [] -> Stream A
  let a nil.Stream => a
  let a (x :: xs) => aux (x :: a) xs
end

val sreverse [A : Ty] : ([] -> Stream A) -> [] -> Stream A
let s => sreverse' s

val main : {} ->> {}
let () =>
  xs := gen-stream 1000000;
  case streamFirstAndLast (sreverse' (sreverse' xs))
  | 0.N $ 0.N => "0" .println
  | _ $ 0.N => "1" .println
  | 0.N $ _ => "2" .println
  | _ $ _ => "3" .println
  end;
  case streamFirstAndLast (sreverse (sreverse xs))
  | 0.N $ 0.N => "0" .println
  | _ $ 0.N => "1" .println
  | 0.N $ _ => "2" .println
  | _ $ _ => "3" .println
  end

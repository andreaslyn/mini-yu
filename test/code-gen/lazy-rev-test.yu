import "yu/prelude/prelude.yu"

val gen-stream : Nat -> [] -> Nat Stream
let (0) => 0 :: nil.Stream
let (++ n) => ++ n :: gen-stream(n)

val 100 : Nat
let => 10 * 10

val 1000 : Nat
let => 100 * 10

val 10000 : Nat
let => 1000 * 10

val 100000 : Nat
let => 10000 * 10

val 1000000 : Nat
let => 100000 * 10

val 10000000 : Nat
let => 1000000 * 10

val streamFirstAndLast' : Nat Stream -> Nat & Nat
let (nil.Stream) => 0 $ 0
let (x :: xs) =>
  case xs[]
  of nil.Stream => x $ x
  of _ :: _ => x $ streamLast(xs[])
  end
where
  val streamLast : Nat Stream -> Nat
  let (nil.Stream) => 0
  let (x :: xs) =>
    case xs[]
    of nil.Stream => x
    of _ :: _ => streamLast(xs[])
    end
end

val streamFirstAndLast : ([] -> Nat Stream) -> Nat & Nat
let (s) => streamFirstAndLast'(s[])

val sreverse'[A : Ty] : A Stream -> [] -> A Stream
let => aux0(nil.Stream)
where
  val aux0 : ([] -> A Stream) -> A Stream -> [] -> A Stream
  let (a) => (xs). aux(a, xs)

  val aux : ([] -> A Stream, A Stream) -> [] -> A Stream
  let (a, nil.Stream) => a
  let (a, x :: xs) => aux(x :: a, xs[])
end

val sreverse[A : Ty] : ([] -> A Stream) -> [] -> A Stream
let (s) => sreverse'(s[])

val main : () ->> {}
let () =>
  xs := gen-stream(10000000);
  #{ Out of memory
  case streamFirstAndLast(sreverse'(sreverse'(xs[])[]))
  of 0 $ 0 => print.Char('0); print(`\n`)
  of _ $ 0 => print.Char('1); print(`\n`)
  of 0 $ _ => print.Char('2); print(`\n`)
  of _ $ _ => print.Char('3); print(`\n`)
  end;
  #}
  case streamFirstAndLast(sreverse(sreverse(xs)))
  of 0 $ 0 => "0" println
  of _ $ 0 => "1" println
  of 0 $ _ => "2" println
  of _ $ _ => "3" println
  end

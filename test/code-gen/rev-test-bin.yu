import "yu/prelude/prelude.yu"
import "yu/Bin/Bin.yu"

val gen-list : Bin -> Bin List
let (b) => b rec(0.Bin :: nil, (b, x). ++ b :: x)

val 100.Bin : Bin
let => 10.Bin * 10.Bin

val 1000.Bin : Bin
let => 100.Bin * 10.Bin

val 10000.Bin : Bin
let => 1000.Bin * 10.Bin

val 100000.Bin : Bin
let => 10000.Bin * 10.Bin

val 1000000.Bin : Bin
let => 100000.Bin * 10.Bin

val rev[A : Ty] : A List -> A List
let (xs) => xs accum(nil, (a, x). x :: a)

val rev'[A : Ty] : A List -> A List
let => aux0(nil)
where
  val aux0 : A List -> A List -> A List
  let (a) => (xs). aux(a, xs)

  val aux : (A List, A List) -> A List
  let (a, nil) => a
  let (a, x :: xs) => aux(x :: a, xs)
end

val main : () ->> {}
let () =>
  xs := gen-list(1000000.Bin);
  case rev'(rev'(xs))
  of nil => "0" println
  of _ => "1" println
  end

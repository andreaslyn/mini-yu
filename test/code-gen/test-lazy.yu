
data Bool : Ty
let true : Bool
let false : Bool

val boolToAscii : Bool -> Ascii
let boolToAscii(true) => `1`
let boolToAscii(false) => `0`

val ! : Bool -> Bool
let !(true) => false
let !(false) => true

val nat-package : Bool -> Bool
let nat-package(true) => even(plus(1, 1))
where
  data Nat : Ty
  let 0 : Nat
  let ++ : Nat -> Nat

  val 1 : Nat
  let 1 => ++(0)

  val 2 : Nat
  let 2 => ++(1)

  val plus : (Nat, Nat) -> Nat
  let plus(m, n) => aux(n)
  where
    val aux : Nat -> Nat
    let aux(0) => m
    let aux(++(n)) => ++(aux(n))
  end

  val even : Nat -> Bool
  let even(0) => true
  let even(++(0)) => false
  let even(++(++(n))) => even(n)
end
let nat-package(b) => odd[](plus(1, plus(1, 1)))
where
  data Nat : Ty
  let 0 : Nat
  let ++ : Nat -> Nat

  val 1 : Nat
  let 1 => ++(0)

  val 2 : Nat
  let 2 => ++(1)

  val plus : (Nat, Nat) -> Nat
  let plus(m, n) => aux(n)
  where
    val aux : Nat -> Nat
    let aux(0) => m
    let aux(++(n)) => ++(aux(n))
  end

  val even : [] -> Nat -> Bool
  let even =>
    o = odd;
    []. (n).
      case n
      of 0 => !(b)
      of ++(n) => o[](n)
      end

  val odd : [] -> Nat -> Bool
  let odd => []. (
    e = even[];
    (n).
      case n
      of 0 => b
      of ++(n) => e(n)
      end
  )
end

val main : () ->> {}
let main() =>
  print(boolToAscii(nat-package(true)));
  print(boolToAscii(nat-package(false)));
  print(`\n`)

import yu/prelude
of (...)

import N => yu/Nat

import L => yu/List


val partition [A : Ty] : List A & (f : A -> Bool) -> List A && List A
let nil.L _ => nil.L $ nil.L
let (x :: xs) f =>
  a $ b := partition xs f;
  case f x
  of true => (x :: a) $ b
  of false => a $ (x :: b)
  end



val.. qsort [A : Ty] : List A & (A & A -> Bool) -> List A
let nil.L _ => nil.L
let (x :: xs) f =>
  ls $ rs := partition xs ((flip f) x);
  qsort ls f :+: x :: qsort rs f


data Delay-List1 : Ty -> Ty
of one [A : Ty] : A -> Delay-List1 A
of (::#Delay-List1) [A : Ty] : A & (() -> Delay-List1 A) -> Delay-List1 A


val sort [A : Ty] : List A & (A & A -> Bool) -> List A
let origList cmp => merge-all (sequences origList)
where
  val sequences : List A -> Delay-List1 (List A)
  let (a :: b :: xs) =>
    case cmp a b
    of false => descending b (a :: nil.L) xs
    of true => ascending b (t => a :: t) xs
    end
  let xs => one xs

  val descending : A & List A & List A -> Delay-List1 (List A)
  let a as (b :: bs) =>
    case cmp a b
    of false => descending b (a :: as) bs
    of true => (a :: as) :: sequences (b :: bs)
    end
  let a as bs => (a :: as) :: sequences bs

  val ascending : A & (List A -> List A) & List A -> Delay-List1 (List A)
  let a as (b :: bs) =>
    case cmp a b
    of true => ascending b (ys => as (a :: ys)) bs
    of false => as (a :: nil.L) :: sequences (b :: bs)
    end
  let a as bs => as (a :: nil.L) :: sequences bs

  val.. merge-all : Delay-List1 (List A) -> List A
  let (one as) => as
  let (as :: xs) => merge-all \ merge-with-head as (xs ())

  val merge-with-head : List A & Delay-List1 (List A) -> Delay-List1 (List A)
  let as (one bs) => one (merge as bs)
  let as (bs :: xs) =>
    merge as bs :: merge-pairs (xs ())

  val merge-pairs : Delay-List1 (List A) -> Delay-List1 (List A)
  let (as :: xs) => merge-with-head as (xs ())
  let xs => xs

  val merge : List A & List A -> List A
  let (a :: as) (b :: bs) =>
    case cmp a b
    of false => b :: merge (a :: as) bs
    of true => a :: merge as (b :: bs)
    end
  let nil.L bs => bs
  let as nil.L => as
end


val msort [A : Ty] : List A & (A & A -> Bool) -> List A
let origList cmp => mergeAll (sequences origList)
where
  val sequences : List A -> List (List A)
  let (a :: b :: xs) =>
    case cmp a b
    of false => descending b (a :: nil.L)  xs
    of true => ascending b (t => a :: t) xs
    end
  let xs => xs :: nil.L

  val descending : A & List A & List A -> List (List A)
  let a as (b :: bs) =>
    case cmp a b
    of false => descending b (a :: as) bs
    of true => (a :: as) :: sequences (b :: bs)
    end
  let a as bs => (a :: as) :: sequences bs

  val ascending : A & (List A -> List A) & List A -> List (List A)
  let a as (b :: bs) =>
    case cmp a b
    of true => ascending b (ys => as (a :: ys)) bs
    of false => as (a :: nil.L) :: sequences (b :: bs)
    end
  let a as bs => as (a :: nil.L) :: sequences bs

  val.. mergeAll : List (List A) -> List A
  let (x :: nil.L) => x
  let xs => mergeAll (mergePairs xs)

  val mergePairs : List (List A) -> List (List A)
  let (a :: b :: xs) => merge a b :: mergePairs xs
  let xs => xs

  val merge : List A & List A -> List A
  let (a :: as) (b :: bs) =>
    case cmp a b
    of false => b :: merge (a :: as) bs
    of true => a :: merge as (b :: bs)
    end
  let nil.L bs => bs
  let as nil.L => as
end


val test1 : (
  bs := false :: false :: true :: false :: true :: true :: false :: nil.L;
  s := false :: false :: false :: false :: true :: true :: true :: nil.L;
  msort bs (<=) = s
)
let => refl


val gen-list : Nat -> List Bool
let 0.N => nil.L
let (++ n) => true :: false :: gen-list n


val plus : Nat & Nat -> Nat
let m 0.N => m
let m (++ n) => plus (++ m) n


val mul : Nat & Nat -> Nat
let _ 0.N => 0.N
let m (++ n) => plus (mul m n) m


val (<=#) : Bool & Bool -> Bool
let true false => false
let _ _ => true


val (>=#Bool) : Bool & Bool -> Bool
let false true => false
let _ _ => true


val 100 : Nat
let => mul 10.N 10.N

val 1'000 : Nat
let => mul 100 10.N

val mN : Nat
let => mul 1'000 100

val qN : Nat
let => mul 1'000 (++ ++ ++ ++ 0.N)


val is-ordered : (Bool & Bool -> Bool) & List Bool -> Bool
let _ nil.L => true
let _ (_ :: nil.L) => true
let cmp (x1 :: x2 :: xs) =>
  case cmp x1 x2
  of false => false
  of true => is-ordered cmp (x2 :: xs)
  end


val main : {} ->> {}
let () =>
  ms := gen-list mN;
  case is-ordered (<=) (msort ms (<=))
  of true => "1" .println
  of false => "0" .println
  end;
  case is-ordered (>=) (msort ms (>=))
  of true => "1" .println
  of false => "0" .println
  end;
  qs := gen-list qN;
  case is-ordered (<=) (qsort qs (<=))
  of true => "1" .println
  of false => "0" .println
  end;
  case is-ordered (>=) (qsort qs (>=))
  of true => "1" .println
  of false => "0" .println
  end

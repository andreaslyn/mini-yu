import yu/prelude
of (...)

import N => yu/Nat

import L => yu/List


val gen-list : Nat -> List Nat
let 0.N => 0.N :: nil.L
let (++ n) => ++ n :: gen-list n

val 100 : Nat
let => 10.N * 10.N

val 1000 : Nat
let => 100 * 10.N

val 10000 : Nat
let => 1000 * 10.N

val 100000 : Nat
let => 10000 * 10.N

val 1000000 : Nat
let => 100000 * 10.N

val 10000000 : Nat
let => 1000000 * 10.N

val listFirstAndLast : List Nat -> Nat && Nat
let nil.L => 0.N $ 0.N
let (x :: nil.L) => x $ x
let (x :: xs) => x $ listlast xs
where
  val listlast : List Nat -> Nat
  let nil.L => 0.N
  let (x :: nil.L) => x
  let (_ :: xs) => listlast xs
end

val reverse [A : Ty] : List A -> List A
let xs => xs .accum nil.L at a x => x :: a

val reverse' [A : Ty] : List A -> List A
let => aux0 nil.L
where
  val aux0 : List A -> List A -> List A
  let a => aux a

  val aux : List A & List A -> List A
  let a nil.L => a
  let a (x :: xs) => aux (x :: a) xs
end

val main : {} ->> {}
let () =>
  xs := gen-list 10000000;
  case listFirstAndLast(reverse'(reverse'(xs)))
  of 0.N $ 0.N => "0.N" .println
  of _ $ 0.N => "1" .println
  of 0.N $ _ => "2" .println
  of _ $ _ => "3" .println
  end;
  case listFirstAndLast(reverse(reverse(xs)))
  of 0.N $ 0.N => "0.N" .println
  of _ $ 0.N => "1" .println
  of 0.N $ _ => "2" .println
  of _ $ _ => "3" .println
  end

import "yu/parallel/parallel.yu"
import "yu/print/print.yu"


val printResult : Str || {} ->> {}
let (in1 msg) => ("error: " :+: msg) .println
let (in2 ()) => "ok" .println


val 100 : Nat
let => 10 * 10

val 10000 : Nat
let => 100 * 100


val spawnLoop : Nat ->> List ([] -> Str || {})
let 0 => nil
let (++ n) =>
  parallel' (_ => n .println) :: spawnLoop n


val _.foreach\List [A : Ty] : List A & (A ->> {}) ->> {}
let nil _ => ()
let (x :: xs) f => f x; xs .foreach f


val main : {} ->> {}
let () =>
  t1 := parallel' (_ => ('t :: '1 :: nil.Str) .println);
  t2 := parallel' (_ => ('t :: '2 :: nil.Str) .println);
  t3 := parallel' (_ => ('t :: '3 :: nil.Str) .println);
  t4 := parallel' (_ => ('t :: '4 :: nil.Str) .println);
  t5 := parallel' (_ => ('t :: '5 :: nil.Str) .println);
  t6 := parallel' (_ => ('t :: '6 :: nil.Str) .println);
  t7 := parallel' (_ => ('t :: '7 :: nil.Str) .println);
  printResult t4;
  printResult t5;
  printResult t6;
  printResult t7;
  spawnLoop (10 * 10) .foreach of t => printResult t

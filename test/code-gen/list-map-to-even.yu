import "yu/prelude/prelude.yu"


val 100 : Nat
let => 10 * 10

val 1000 : Nat
let => 100 * 10

val 30'000 : Nat
let => 100 * 100 * 3

val make-list : Nat -> List Nat
let n => aux n nil
where
  val aux : Nat & List Nat -> List Nat
  let 0 ns => 0 :: ns
  let (++ n) ns => aux n (++ n :: ns)
end

val evens : List Nat -> List Bool
let ns => ns .map _.isEven

val count-evens : List Bool -> Nat
let ns =>
  ns .fold 0 of b x =>
    match b
    let true => ++ x
    let false => x
    end

val test : Nat
let => count-evens (evens (make-list 30'000))

val main : {} ->> {}
let () => test .println

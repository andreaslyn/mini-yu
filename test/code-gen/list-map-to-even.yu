import yu/prelude
of (...)

import N => yu/Nat

import L => yu/List


val 100 : Nat
let => 10.N * 10.N

val 1000 : Nat
let => 100 * 10.N

val 30'000 : Nat
let => 100 * 100 * 3.N

val make-list : Nat -> List Nat
let n => aux n nil.L
where
  val aux : Nat & List Nat -> List Nat
  let 0.N ns => 0.N :: ns
  let (++ n) ns => aux n (++ n :: ns)
end

val evens : List Nat -> List Bool
let ns => ns .map (.isEven)

val count-evens : List Bool -> Nat
let ns =>
  ns .fold 0.N \ b x =>
    case b
    of true => ++ x
    of false => x
    end

val test : Nat
let => count-evens (evens (make-list 30'000))

val main : {} ->> {}
let () => test .println

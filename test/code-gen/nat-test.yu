import yu/prelude
of (...)

import S => yu/Str

import N => yu/Nat

import L => yu/List


val plus : Nat & Nat -> Nat
let m 0.N => m
let m (++ n) => plus (++ m) n

val mul : Nat & Nat -> Nat
let _ 0.N => 0.N
let m (++ n) => plus (mul m n) m

val 100 : Nat
let => mul 10.N 10.N

val 1000 : Nat
let => mul 100 10.N

val 10000 : Nat
let => mul 1000 10.N

val N : Nat
let => mul 10000 1000

val.. natToStr : Nat -> Str
let (0.N) => mk.S('0 :: nil.L)
let (++ 0.N) => mk.S('1 :: nil.L)
let (++ ++ 0.N) => mk.S('2 :: nil.L)
let (++ ++ ++ 0.N) => mk.S('3 :: nil.L)
let (++ ++ ++ ++ 0.N) => mk.S('4 :: nil.L)
let (++ ++ ++ ++ ++ 0.N) => mk.S('5 :: nil.L)
let (++ ++ ++ ++ ++ ++ 0.N) => mk.S('6 :: nil.L)
let (++ ++ ++ ++ ++ ++ ++ 0.N) => mk.S('7 :: nil.L)
let (++ ++ ++ ++ ++ ++ ++ ++ 0.N) => mk.S('8 :: nil.L)
let (++ ++ ++ ++ ++ ++ ++ ++ ++ 0.N) => mk.S('9 :: nil.L)
let (n) =>
  q $ r := n .divmod 10.N is++.N;
  natToStr q :+: natToStr r

val main : {} ->> {}
let () =>
  N .println;
  plus N (++ 0.N) .println

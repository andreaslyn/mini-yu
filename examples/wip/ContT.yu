import "yu/prelude.yu"


data _IsMonad\_->_ : (Ty -> Ty) -> Ty
let isMonad[M : Ty -> Ty] : (
  (A, A : Ty) -> M(A),
  (M(A), [] -> A -> M(B), A : Ty, B : Ty) -> M(B)
) -> M IsMonad


val _pure\_IsMonad\_->_[A : Ty, M : Ty -> Ty] : M IsMonad -> A -> M(A)
let (isMonad(r, _)) => r(_, A)


val _bind\_IsMonad\_->_[A; B : Ty, M : Ty -> Ty] :
  (M IsMonad, M(A)) -> ([] -> A -> M(B)) -> M(B)
let (isMonad(_, b), a) => (f). b(a, f[], A, B)


val idIsMonad : id IsMonad
let => isMonad(_:!_, bind)
where
  val bind : (A, [] -> A -> B, A; B : Ty) -> B
  let (x, f, A, B) => f[](x)
end


data _ContT\Ty : (Ty, Ty, M : Ty -> Ty, M IsMonad) -> Ty
let contT[A; R : Ty, M : Ty -> Ty, isM : M IsMonad] :
  ((A -> M(R)) -> M(R)) -> A ContT(R, M, isM)


val _ap\_ContT\Ty[A; R : Ty, M : Ty -> Ty, isM : M IsMonad] :
  (A ContT(R, M, isM), A -> M(R)) -> M(R)
let (contT(c), k) => c(k)


val _eval\_ContT\Ty[R : Ty, M : Ty -> Ty, isM : M IsMonad] :
  R ContT(R, M, isM) -> M(R)
let (c) => c ap(isM pure)


val pure.ContT[A; R : Ty, M : Ty -> Ty, isM : M IsMonad] :
  A -> A ContT(R, M, isM)
let (a) => contT (k). k(a)


val _>>=_\_ContT\Ty[A; B; R : Ty, M : Ty -> Ty, isM : M IsMonad] :
  (A ContT(R, M, isM), [] -> A -> B ContT(R, M, isM)) -> B ContT(R, M, isM)
let (x, f) => contT (k). x ap (a). f[](a) ap(k)


val contTIsMonad[R : Ty, M : Ty -> Ty, isM : M IsMonad] :
  _ ContT\Ty(R, M, isM) IsMonad
let => isMonad((a, A). pure.ContT(a), (x, f, A, B). x >>= f[])


val _lift\_IsMonad\_->_[A; R : Ty, M : Ty -> Ty] :
  (isM : M IsMonad, M(A)) -> A ContT(R, M, isM)
let (isM, x) => contT (k). isM bind(x)([]. k)


val callcc.ContT[A; R : Ty, M : Ty -> Ty, isM : M IsMonad] :
  (((A, B : Ty) -> B ContT(R, M, isM)) -> A ContT(R, M, isM)) ->
  A ContT(R, M, isM) 
let (c) => contT (k). c((a, B). contT (_). k(a)) ap(k)


val reset.ContT[R; R' : Ty, M : Ty -> Ty] :
  (isM : M IsMonad, R ContT(R, M, isM)) -> R ContT(R', M, isM)
let (isM, x) => isM lift(x eval)


val shift.ContT[R; A : Ty, M : Ty -> Ty] :
  (isM : M IsMonad, (A -> M(R)) -> R ContT(R, M, isM)) -> A ContT(R, M, isM)
let (isM, f) => contT(_eval @ f)


val _HandlerFun\_->_ : (Ty -> Ty, Ty, Ty -> Ty) -> Ty
let (Sig, R, M) => (Sig(A), A : Ty, A -> M(R)) -> M(R)


data _Handler\_->_ : (Ty -> Ty, Ty, M : Ty -> Ty, isM : M IsMonad) -> Ty
let mkHandler[Sig : Ty -> Ty, R : Ty, M : Ty -> Ty, isM : M IsMonad] :
  Sig HandlerFun(R, M) -> Sig Handler(R, M, isM)


val _ap\_Handler\_->_[Sig : Ty -> Ty, R : Ty, M : Ty -> Ty, isM : M IsMonad] :
  Sig Handler(R, M, isM) -> Sig HandlerFun(R, M)
let (mkHandler(f)) => f


data StateSigna : Ty -> Ty -> Ty
let getOp[A : Ty] : StateSigna(A)(A)
let putOp[A : Ty] : A -> StateSigna(A)(Unit)


val stateHandler[A; S : Ty, M : Ty -> Ty, isM : M IsMonad] :
  StateSigna(S) Handler(S -> M(A), M, isM)
let => mkHandler(hand)
where
  val hand : StateSigna(S) HandlerFun(S -> M(A), M)
  let (getOp, _, k) => isM pure (s). isM bind(k(s)) (k). k(s)
  let (putOp(x), _, k) => isM pure (_). isM bind(k(unit)) (k). k(x)
end


val _Ef\_->_ : (Ty -> Ty, Ty, M : Ty -> Ty, M IsMonad) -> Ty
let (Sig, R, M, isM) => (B : Ty, Sig(B)) -> B ContT(R, M, isM)


val _handle\_Handler\_->_[A; R : Ty, Sig; M : Ty -> Ty, isM : M IsMonad] :
  (Sig Handler(R, M, isM), Sig Ef(R, M, isM) -> A ContT(R, M, isM)) -> 
  A ContT(R, M, isM)
let (h, c) => contT (k). c((B, x). contT (f). h ap(x, B, f)) ap(k)


val _runStateHandler\_IsMonad\_->_[A; S : Ty, M : Ty -> Ty]
  : (isM : M IsMonad, S) ->
    (StateSigna(S) Ef(S -> M(S & A), M, isM) -> A ContT(S -> M(S & A), M, isM)) ->
    M(S & A)
let (isM, s) => (c).
    isM bind(
      stateHandler handle(c) ap (a). isM pure (s). isM pure(s $ a)) (f).
    f(s)


val plusWithStateEffect : (Nat, Nat) -> Nat & Nat
let (m, n) =>
  idIsMonad runStateHandler(n) (st).
  st(Nat, getOp) >>= (n).
  st(Unit, putOp(m + n)) >>= (_).
  st(Nat, getOp) >>= (r).
  pure.ContT(r)


data PartialSigna : Ty -> Ty
let failOp[A : Ty] : PartialSigna(A)


val partialHandler[A : Ty, M : Ty -> Ty, isM : M IsMonad] :
  PartialSigna Handler(? A, M, isM)
let => mkHandler(hand)
where
  val hand : PartialSigna HandlerFun(? A, M)
  let (failOp, _, k) => isM pure(no)
end


val _runPartialHandler\_IsMonad\_->_[A : Ty, M : Ty -> Ty] :
  (isM : M IsMonad) ->
  (PartialSigna Ef(? A, M, isM) -> A ContT(? A, M, isM)) ->
  M(? A)
let (isM) => (c). partialHandler handle(c) ap(isM pure @ yes)


val testPartialEffect : (Nat, Nat) -> ? Nat
let (x, y) =>
  idIsMonad runPartialHandler (pa).
  partialHandler handle (pa).
  get(pa, x) >>= (x).
  get(pa, y) >>= (y).
  pure.ContT(x + y)
where
  val get :
    (PartialSigna Ef(? Nat, id, idIsMonad), Nat) ->
    Nat ContT(? Nat, id, idIsMonad)
  let (pa, n) => if(n =? 0) then(pa(Nat, failOp)) else(pure.ContT(n))
end


val partialPlusWithStateEffect : (Nat, Nat) -> ? (Nat & Nat)
let (m, n) =>
  idIsMonad runPartialHandler (pa).
  contTIsMonad runStateHandler(0) (st).
  get(pa, m) >>= (m).
  st(Unit, putOp(m)) >>= (_).
  get(pa, n) >>= (n).
  st(Nat, getOp) >>= (m).
  st(Unit, putOp(m + n)) >>= (_).
  st(Nat, getOp) >>= (r).
  pure.ContT(r)
where
  val get[A : Ty, M : Ty -> Ty, isM : M IsMonad] :
    (PartialSigna Ef(? A, M, isM), Nat) ->
    Nat ContT(Nat -> A ContT(? A, M, isM), _ ContT(? A, M, isM), contTIsMonad)
  let (pa, x) =>
    if(x =? 0)
    then(contTIsMonad lift(pa(Nat, failOp)))
    else(pure.ContT(x))
end


val plusPartialWithStateEffect : (Nat, Nat) -> Nat & ? Nat
let (m, n) =>
  idIsMonad runStateHandler(0) (st).
  contTIsMonad runPartialHandler (pa).
  get(pa, m) >>= (m).
  contTIsMonad lift(st(Unit, putOp(m))) >>= (_).
  get(pa, n) >>= (n).
  contTIsMonad lift(st(Nat, getOp)) >>= (m).
  contTIsMonad lift(st(Unit, putOp(m + n))) >>= (_).
  contTIsMonad lift(st(Nat, getOp)) >>= (r).
  pure.ContT(r)
where
  val get[A : Ty, M : Ty -> Ty, isM : M IsMonad] :
    (PartialSigna Ef(? A, M, isM), Nat) ->
    Nat ContT(? A, M, isM)
  let (pa, x) =>
    if(x =? 0)
    then(pa(Nat, failOp))
    else(pure.ContT(x))
end


data ChoiceSigna : Ty -> Ty
let decideOp : ChoiceSigna(Bool)


val choiceHandler[A : Ty, M : Ty -> Ty, isM : M IsMonad] :
  ChoiceSigna Handler(A List, M, isM)
let => mkHandler(hand)
where
  val hand : ChoiceSigna HandlerFun(A List, M)
  let (decideOp, _, k) =>
    isM bind(k(true)) (x).
    isM bind(k(false)) (y).
    isM pure(x :+: y)
end


val _runChoiceHandler\_IsMonad\_->_[A : Ty, M : Ty -> Ty] :
  (isM : M IsMonad) ->
  (ChoiceSigna Ef(A List, M, isM) -> A ContT(A List, M, isM)) ->
  M(A List)
let (isM) => (c). choiceHandler handle(c) ap(isM pure @ (_ :: nil))


val testChoice1 : Nat List List
let =>
  idIsMonad runChoiceHandler (c1).
  contTIsMonad runChoiceHandler (c2).
  contTIsMonad lift(c1(Bool, decideOp)) >>= (b1). do
  x := if(b1) then(10) else(10 + 10);
  c2(Bool, decideOp) >>= (b2). do
  y := if(b2) then(0) else(5);
  pure.ContT(x - y)


val testChoice2 : Nat List List
let =>
  idIsMonad runChoiceHandler (c2).
  contTIsMonad runChoiceHandler (c1).
  c1(Bool, decideOp) >>= (b1). do
  x := if(b1) then(10) else(10 + 10);
  contTIsMonad lift(c2(Bool, decideOp)) >>= (b2). do
  y := if(b2) then(0) else(5);
  pure.ContT(x - y)


########################## Reset/shift ###############################

val testResetShift1 : Nat
let =>
  _eval do
  reset.ContT(idIsMonad, _) do
  pure.ContT(3) >>= (x).
  shift.ContT (idIsMonad, (_). pure.ContT(5 * 2)) >>= (y).
  pure.ContT(1) >>= (z).
  pure.ContT(x + y - z)


val testResetShift2 : Nat
let =>
  _eval do
  reset.ContT(idIsMonad, _) do
  pure.ContT(3) >>= (x).
  shift.ContT (idIsMonad, (k). pure.ContT(k(2))) >>= (y).
  pure.ContT(1) >>= (z).
  pure.ContT(x + y - z)


val TripPa1 : Ty
let =>
  PartialSigna Ef(? Str,
    _ ContT(Nat -> Nat & ? Str, id, idIsMonad), contTIsMonad)


val TripSt1 : Ty
let => StateSigna(Nat) Ef(Nat -> Nat & ? Str, id, idIsMonad)


val TripComp1 : Ty -> Ty
let (A) =>
  A ContT(? Str,
    _ ContT(Nat -> Nat & ? Str, id, idIsMonad), contTIsMonad)


val decr1 : (TripPa1, TripSt1) -> TripComp1(Unit)
let (pa, st) =>
  contTIsMonad lift(st(Nat, getOp)) >>= (x).
  case x
  of 0 => pa(Unit, failOp)
  of ++ x => contTIsMonad lift do st(Unit, putOp(x))
  end


val tripleDecr1 : (TripPa1, TripSt1) -> TripComp1(Str)
let (pa, st) =>
  decr1(pa, st) >>= (_).
  reset.ContT(contTIsMonad,
    decr1(pa, st) >>= (_).
    decr1(pa, st) >>= (_).
    pure.ContT(yes("end of reset"))
  ) >>= (x).
  case x
  of yes(x) => pure.ContT(x)
  of no => pure.ContT("catch block")
  end


val runTripleDecr1 : Nat -> Nat & ? Str
let (s) =>
  idIsMonad runStateHandler(s) (st).
  contTIsMonad runPartialHandler (pa).
  tripleDecr1(pa, st)


val TripPa2 : Ty
let => PartialSigna Ef(? (Nat & Str), id, idIsMonad)


val TripSt2 : Ty
let =>
  StateSigna(Nat) Ef(
    Nat -> (Nat & Str) ContT(? (Nat & Str), id, idIsMonad),
    _ ContT(? (Nat & Str), id, idIsMonad), contTIsMonad)


val TripComp2 : Ty -> Ty
let (A) =>
  A ContT(
    Nat -> (Nat & Str) ContT(? (Nat & Str), id, idIsMonad),
    _ ContT(? (Nat & Str), id, idIsMonad), contTIsMonad)


val decr2 : (TripPa2, TripSt2) -> TripComp2(Unit)
let (pa, st) =>
  st(Nat, getOp) >>= (x).
  case x
  of 0 => contTIsMonad lift(pa(Unit, failOp))
  of ++ x => st(Unit, putOp(x))
  end


val tripleDecr2 : (TripPa2, TripSt2) -> TripComp2(Str)
let (pa, st) =>
  decr2(pa, st) >>= (_).
  reset.ContT(contTIsMonad,
    decr2(pa, st) >>= (_).
    decr2(pa, st) >>= (_).
    pure.ContT((n). pure.ContT(n $ "end of reset"))
  ) >>= (f).
  st(Nat, getOp) >>= (s).
  contTIsMonad lift(f(s)) >>= (x).
  st(Unit, putOp(x 1)) >>= (_).
  pure.ContT(x 2)


val tripleDecr2' : (TripPa2, TripSt2) -> TripComp2(Str)
let (pa, st) =>
  decr2(pa, st) >>= (_).
  (
    (
      contT (stk).
      pure.ContT (s0). do
      defaultSt := (A : Ty, a : A). s0 $ a;
      ## (((X : Ty, X) -> R(X),                                 ## default
      ##    (qs : EfList, (S -> S & A ~ qs) ~ qs) -> R(A) ~ qs) ## convert handler result using s0
      ##     -> R(A) ~ ps,                                      ## final result
      ##    A -> (S -> S & A ~ ps) ~ ps                         ## continuation (stk)
      ## ) -> (S -> S & A ~ ps) ~ ps
      ## where R(A) => S & A.
      (
        contT (pak). do
        defaultPa := (A : Ty, a : A). yes(a);
        h := ( idIsMonad runPartialHandler (pa').
               ( contTIsMonad runStateHandler(s0) (st'). do
                 decr2' :=
                  st'(Nat, getOp) >>= (x).
                  case x
                  of 0 => contTIsMonad lift(pa'(Unit, failOp))
                  of ++ x => st'(Unit, putOp(x))
                  end;
                 decr2' >>= (_).
                 decr2' >>= (_).
                 pure.ContT("end of decr")
               )
             ) :! ? (Nat & Str);
        ## In general we will be inside a continuation monad:
        ## h >>= (h).
        ## But in this case it is just the identity monad:
        idIsMonad bind(h) (h).
        case h
        of no => pak(defaultSt(? Str, no))
        of yes(x) => pak(x map(yes))
        end
      ) >>= (x). stk(x 2) >>= (k). k(x 1)
    ) >>= (m).
    case m
    of no => pure.ContT("catch")
    of yes(s) => pure.ContT(s)
    end
  )


val runTripleDecr2 : Nat -> ? (Nat & Str)
let (s) =>
  idIsMonad runPartialHandler (pa).
  contTIsMonad runStateHandler(s) (st).
  tripleDecr2(pa, st)


val runTripleDecr2' : Nat -> ? (Nat & Str)
let (s) =>
  idIsMonad runPartialHandler (pa).
  contTIsMonad runStateHandler(s) (st).
  tripleDecr2'(pa, st)

########################## End reset/shift ##########################


val main : () ->> Unit
let () =>
  testPartialEffect(2, 0) str(_str) println;
  testPartialEffect(0, 2) str(_str) println;
  testPartialEffect(2, 2) str(_str) println;
  partialPlusWithStateEffect(2, 0) str((p). p str(_str, (x, _). x str)) println;
  partialPlusWithStateEffect(0, 2) str((p). p str(_str, (x, _). x str)) println;
  partialPlusWithStateEffect(2, 2) str((p). p str(_str, (x, _). x str)) println;
  plusPartialWithStateEffect(2, 0) str(_str, (x, _). x str(_str)) println;
  plusPartialWithStateEffect(0, 2) str(_str, (x, _). x str(_str)) println;
  plusPartialWithStateEffect(2, 2) str(_str, (x, _). x str(_str)) println;
  ("[" :+: testChoice1 str((xs). "[" :+: xs str(_str, ",") :+: "]", ",") :+: "]") println;
  ("[" :+: testChoice2 str((xs). "[" :+: xs str(_str, ",") :+: "]", ",") :+: "]") println;
  testResetShift1 str println;
  testResetShift2 str println;
  runTripleDecr1(0) str(_str, (x, _). x str(id)) println;
  runTripleDecr1(1) str(_str, (x, _). x str(id)) println;
  runTripleDecr1(2) str(_str, (x, _). x str(id)) println;
  runTripleDecr1(3) str(_str, (x, _). x str(id)) println;
  runTripleDecr2(0) str((x). x str(_str, (s, _). s)) println;
  runTripleDecr2(1) str((x). x str(_str, (s, _). s)) println;
  runTripleDecr2(2) str((x). x str(_str, (s, _). s)) println;
  runTripleDecr2(3) str((x). x str(_str, (s, _). s)) println;
  runTripleDecr2'(0) str((x). x str(_str, (s, _). s)) println;
  runTripleDecr2'(1) str((x). x str(_str, (s, _). s)) println;
  runTripleDecr2'(2) str((x). x str(_str, (s, _). s)) println;
  runTripleDecr2'(3) str((x). x str(_str, (s, _). s)) println

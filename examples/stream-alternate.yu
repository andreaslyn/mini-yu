import yu/prelude
| (...)

import N => yu/Nat
| (...#Nat.N)

import L => yu/List
| (...#List.L)

import Stream => yu/Stream
| Stream
| (...#Stream)


val alternate [A : Ty] : A & A -> Stream A
let a1 a2 => alt1
where
  val.. alt1 : Stream A
  let => a1 :: alt2

  val.. alt2 : Stream A
  let => a2 :: alt1
end


val main : {} ->> {}
let () =>
  alternate 0.N 1.N .takeList! 10.N .str (.str) ", " .println

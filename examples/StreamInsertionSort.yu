import "yu/Stream.yu"
import "yu/Ordering?.yu"


val _insertionSort\_Stream\Ty[A : Ty] : (A Stream, A Ordering?) -> A Stream
let (xs, od) => xs fold(nil.Stream, insert)
where
  val insert : (A, A Stream) -> A Stream
  let (x, nil.Stream) => x :: nil.Stream
  let (x, a :: as) =>
    if(od le?(x, a)) then(x :: a :: as[]) else(a :: insert(x, as[]))
end


val test : do
  a := 3 :: 2 :: 5 :: 3 :: 1 :: nil.Stream;
  b := 1 :: 2 :: 3 :: 3 :: 5 :: nil.Stream;
  a insertionSort(ordering?.Nat) = b
let => refl

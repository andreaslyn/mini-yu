import yu/prelude
| (...)

import Stream => yu/Stream
| Stream
| (...#Stream)

import Ord? => yu/Ordering?
| Ordering?
| (...#Ordering?)

import N => yu/Nat


val (.insertionSort#Stream) [A : Ty] : Stream A & Ordering? A -> Stream A
let xs od => xs .fold nil.Stream insert
where
  val insert : A & Stream A -> Stream A
  let x nil.Stream => x :: nil.Stream
  let x (a :: as) =>
    if (od .le? x a) .then (x :: a :: as) .else (a :: insert x as)
end


val test : of
  a := 3.N :: 2.N :: 5.N :: 3.N :: 1.N :: nil.Stream;
  b := 1.N :: 2.N :: 3.N :: 3.N :: 5.N :: nil.Stream;
  a .insertionSort ordering?.N = b
let => refl

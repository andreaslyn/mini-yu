#{
Short proof of type-in-type inconsistency.

This code was originally written by Torsten Altenkirch in Agda,
http://www.cs.nott.ac.uk/~psztxa/g53cfr/l20.html/l20.html.
It has been ported to Mini Yu.
#}

import yu/prelude
of (...)


data M : Ty
of m : (I : Ty) & (I -> M) -> M


val 0 : M
let => m Empty (.rec)


val 1 : M
let => m {} (const 0)


val 2 : M
let => m Bool \ b => if b .then 0 .else 1


val (<-#M) : M & M -> Ty
let a (m I f) => &: ((i : I) => a = f i)


val (<!#M) : M & M -> Ty
let a b => ! (a <- b)


val R : M
let => m (&: \ (a : M) => a <! a) (.1)


val lem-1 [X : M] : X <- R -> X <! X
let ((Y $ Y!) $ refl) => Y!


val lem-2 [X : M] : X <! X -> X <- R
let X! => (X $ X!) $ refl


val lem-3 : R <! R
let Ri => lem-1 Ri Ri


val contr : Empty
let => lem-3 (lem-2 lem-3)

import yu/prelude
of (...)

import Ord? => yu/Ordering?
of Ordering?
of (...#Ordering?)

import L => yu/List


data BinomialTree : (A : Ty) & Ordering? A -> Ty
of node [A : Ty] [od : Ordering? A] :
  A & List (BinomialTree A od) -> BinomialTree A od


val (.root#BinomialTree) [A] [od : Ordering? A] :
  BinomialTree A od -> A
let (node x _) => x


val (.link#BinomialTree) [A] [od : Ordering? A] :
  BinomialTree A od & BinomialTree A od -> BinomialTree A od
let (node x1 c1) (node x2 c2) =>
  if (od .le? x1 x2)
  .then (node x1 (node x2 c2 :: c1))
  .else (node x2 (node x1 c1 :: c2))


data BinomialHeap : (A : Ty) & Ordering? A -> Ty
of mk [A : Ty] [od : Ordering? A] :
  List (BinomialTree A od) -> BinomialHeap A od


val (<rank#BinomialTree) [A] [od : Ordering? A] :
  BinomialTree A od & BinomialTree A od -> Bool
let (node _ nil.L) _ => false
let _ (node _ nil.L) => true
let (node _ (t1 :: _)) (node _ (t2 :: _)) =>
  t1 <rank t2


val (.insert#BinomialTree) [A] [od : Ordering? A] :
  BinomialTree A od & List (BinomialTree A od) -> List (BinomialTree A od)
let t nil.L => t :: nil.L
let t1 (t2 :: ts) =>
  if (t1 <rank t2)
  .then (t1 :: t2 :: ts)
  .else (t1 .link t2 .insert ts)


val (.insert#BinomialHeap) [A] [od : Ordering? A] :
  BinomialHeap A od & A -> BinomialHeap A od
let (mk ts) x =>
  mk (node x nil.L .insert ts)


val merge [A] [od : Ordering? A] :
  List (BinomialTree A od) & List (BinomialTree A od) ->
  List (BinomialTree A od)
let ts1 nil.L => ts1
let nil.L ts2 => ts2
let (t1 :: ts1) (t2 :: ts2) =>
  if (t1 <rank t2) .then (t1 :: merge ts1 (t2 :: ts2))
  .elif (t2 <rank t1) .then (t2 :: merge (t1 :: ts1) ts2)
  .else (t1 .link t2 .insert (merge ts1 ts2))


val (.merge#BinomialHeap) [A] [od : Ordering? A] :
  BinomialHeap A od & BinomialHeap A od -> BinomialHeap A od
let (mk ts1) (mk ts2) =>
  mk (merge ts1 ts2)


val deleteMin [A] [od : Ordering? A] :
  (ts : List at BinomialTree A od) ->
  (ts = nil.L [A := BinomialTree A od]) ||
  BinomialTree A od && List (BinomialTree A od)
let nil.L => in1(refl)
let (t1 :: ts1) =>
  case deleteMin ts1
  of in1 refl => in2 (t1 $ nil.L)
  of in2 (t2 $ ts2) =>
    if (od .le? (t1 .root) (t2 .root))
    .then (in2 (t1 $ ts1))
    .else (in2 (t2 $ at t1 :: ts2))
  end


val (.deleteMin#BinomialHeap) [A] [od : Ordering? A] :
  BinomialHeap A od -> BinomialHeap A od
let (mk ts) =>
  case deleteMin ts
  of in1 refl => mk nil.L
  of in2 (node _ ts1 $ ts2) => 
    mk (merge (ts1 .rev) ts2)
  end

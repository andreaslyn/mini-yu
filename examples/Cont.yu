import "yu/prelude.yu"


data _Cont\Ty : (Ty, Ty) -> Ty
let cont[A; R : Ty] : ((A -> R) -> R) -> A Cont(R)


val _ap\_Cont\Ty[A; R : Ty] : (A Cont(R), A -> R) -> R
let (cont(c), k) => c(k)


val _eval\_Cont\Ty[R : Ty] : R Cont(R) -> R
let (c) => c ap(id)


val pure.Cont[A; R : Ty] : A -> A Cont(R)
let (a) => cont (k). k(a)


val _>>=_\_Cont\Ty[A; B; R : Ty] : (A Cont(R), A -> B Cont(R)) -> B Cont(R)
let (x, f) => cont (k). x ap (a). f(a) ap(k)


val example6 : Nat -> Bool
let (x) =>
  _eval do
  timesThree(x) >>= (y). do
  greaterThanTen(y) >>= (z). do
  pure.Cont(z)
where
  val timesThree[R : Ty] : Nat -> Nat Cont(R)
  let (x) => cont (k). k(3 * x)

  val greaterThanTen[R : Ty] : Nat -> Bool Cont(R)
  let (y) => cont (k). k (10 <? y)
end


val _>=>_\_Cont\Ty[A; B; C; R : Ty] :
  (A -> B Cont(R), B -> C Cont(R)) -> A -> C Cont(R)
let (f, g) => (a). f(a) >>= g


data _Partial\Ty : Ty -> Ty
let partial[A : Ty] : ((R : Ty) -> A Cont(? R)) -> A Partial


val _sp\_Partial\Ty[A : Ty] : (A Partial, R : Ty) -> A Cont(? R)
let (partial(x), R) => x(R)


val none.Partial[A : Ty] : A Partial
let => partial (R). cont (_). no


val pure.Partial[A : Ty] : A -> A Partial
let (a) => partial (R). pure.Cont(a)


val _>>=_\_Partial\Ty[A; B : Ty] : (A Partial, A -> B Partial) -> B Partial
let (x, f) => partial do (R). x sp(R) >>= (a). f(a) sp(R)


val _eval\_Partial\Ty[A : Ty] : A Partial -> ? A
let (p) => p sp(A) ap(yes)


val testPartial : (Nat, Nat) -> ? Nat
let (x, y) =>
  _eval do
  get(x) >>= (x).
  get(y) >>= (y).
  pure.Partial(x + y)
where
  val get : Nat -> Nat Partial
  let (n) => if(n =? 0) then(none.Partial) else(pure.Partial(n))
end


val backtrackBool.Partial : Bool Partial
let =>
  partial (R). cont (k).
  case k(true)
  of no => k(false)
  of yes(x) => yes(x)
  end


data _State\Ty : (Ty, Ty) -> Ty
let state[A; S : Ty] : ((R : Ty) -> A Cont(S -> R)) -> A State(S)


val _sp\_State\Ty[A; S : Ty] : (A State(S), R : Ty) -> A Cont(S -> R)
let (state(x), R) => x(R)


val pure.State[A; S : Ty] : A -> A State(S)
let (a) => state (R). cont (k). k(a)


val _>>=_\_State\Ty[A; B; S : Ty] : (A State(S), A -> B State(S)) -> B State(S)
let (x, f) => state do (R). x sp(R) >>= (a). f(a) sp(R)


val get.State[S : Ty] : S State(S)
let => state (R). cont (k). (s). k(s)(s)


val put.State[S : Ty] : S -> Unit State(S)
let (s) => state (R). cont (k). (_). k(unit)(s)


val _eval\_State\Ty[A; S : Ty] : (A State(S), S) -> A & S
let (m, s) => m sp(A & S) ap((a). a $ _)(s)


val plusWithState : (Nat, Nat) -> Nat
let (m, n) =>
  _2 do _ eval\_State\Ty(m) do
  get.State >>= put.State @ (n + _)


val callcc[A; B; R : Ty] : ((A -> B Cont(R)) -> A Cont(R)) -> A Cont(R)
let (f) => cont (k). f((a). cont (c). k(a)) ap(k)


val _Handler\_->_ : (M : Ty -> Ty, sig : Ty -> Ty) -> Ty
let (M, sig) => (sig(A), A -> M(B), A; B : Ty) -> M(B)


data StateSigna : Ty -> Ty -> Ty
let getOp[A : Ty] : StateSigna(A)(A)
let putOp[A : Ty] : A -> StateSigna(A)(Unit)


val stateHandler[S : Ty] : ((A : Ty). S -> S & A) Handler(StateSigna(S))
let (getOp, k, A, B) => (s). k(s)(s)
let (putOp(x), k, A, B) => (_). k(unit)(x)


val main : () ->> Unit
let () =>
  example6(3) println;
  example6(4) println;
  testPartial(2, 0) str(_str) println;
  testPartial(0, 2) str(_str) println;
  testPartial(2, 2) str(_str) println;
  plusWithState(4, 5) println

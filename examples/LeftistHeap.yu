import yu/prelude
of (...)

import Ord? => yu/Ordering?
of Ordering?
of (...#Ordering?)

import L => yu/List

import DelayList1 => yu/DelayList1
of DelayList1
of (...#DelayList1)


data LeftistHeap : (A : Ty) & Ordering? A -> Ty
of leaf [A : Ty] [od : Ordering? A] : LeftistHeap A od
of (.node#LeftistHeap) [A : Ty] [od : Ordering? A] :
  LeftistHeap A od & LeftistHeap A od & A -> LeftistHeap A od


data (.IsNode#LeftistHeap) [A : Ty] [od : Ordering? A] :
  LeftistHeap A od -> Ty
of isNode [A : Ty] [od : Ordering? A]
    [a : LeftistHeap A od] [b : LeftistHeap A od] [x : A] :
  a .node b x .IsNode


val singleton [A : Ty] [od : Ordering? A] : A -> LeftistHeap A od
let x => leaf .node leaf x


val (<=rank#LeftistHeap) [A : Ty] [od : Ordering? A] :
  LeftistHeap A od & LeftistHeap A od -> Bool
let leaf _ => true
let (_ .node _ _) leaf => false
let (_ .node b1 _) (_ .node b2 _) => b1 <=rank b2


val (.mkNode#LeftistHeap) [A : Ty] [od : Ordering? A] :
  LeftistHeap A od & LeftistHeap A od & A -> LeftistHeap A od
let a b x =>
  if (a <=rank b) .then (b .node a x) .else (a .node b x)


\\ Runs in O(log(n) ^ 2) time, since <=rank is O(log(n)).

val (.merge#LeftistHeap) [A : Ty] [od : Ordering? A] :
  LeftistHeap A od & LeftistHeap A od -> LeftistHeap A od
let h leaf => h
let leaf h => h
let (a1 .node b1 x1) (a2 .node b2 x2) =>
  if (od .le? x1 x2)
  .then (a1 .mkNode (b1 .merge (a2 .node b2 x2)) x1)
  .else (a2 .mkNode (a1 .node b1 x1 .merge b2) x2)


val (.insert#LeftistHeap) [A : Ty] [od : Ordering? A] :
  LeftistHeap A od & A -> LeftistHeap A od
let leaf y => singleton y
let (a .node b x) y =>
  if (od .lt? x y)
  .then (a .mkNode (b .insert y) x)
  .else (a .node b x .node leaf y)


val (.findMin?#LeftistHeap) [A : Ty] [od : Ordering? A] :
  LeftistHeap A od -> ? A
let leaf => no
let (_ .node _ x) => yes x


val (.findMin#LeftistHeap) [A : Ty] [od : Ordering? A] :
  (h : LeftistHeap A od) & h .IsNode -> A
let (_ .node _ x) isNode => x


val (.deleteMin#LeftistHeap) [A : Ty] [od : Ordering? A] :
  LeftistHeap A od -> LeftistHeap A od
let leaf => leaf
let (a .node b _) => a .merge b


val fromList [A : Ty] [od : Ordering? A] : List A -> LeftistHeap A od
let list => heapList list .tournament (.merge)
where
  val heapList : List A -> DelayList1 at LeftistHeap A od
  let nil.L => one.DelayList1 leaf
  let (x :: xs) => singleton x :: at _ => heapList xs
end

import "Equal.yu"


data Bool : Ty
let false : Bool
let true : Bool


val _.ind\Bool : (b : Bool) & (P : Bool -> Ty) & ([] -> P false) & ([] -> P true) -> P b
let false P x _ => x
let true P _ y => y


val _.rec\Bool [A : Ty] : (b : Bool) & ([] -> A) & ([] -> A) -> A
let b x y => b .ind (const A) x y


val (!_\Bool) : Bool -> Bool
let true => false
let false => true


val _||_\Bool : Bool & ([] -> Bool) -> Bool
let true _ => true
let false b => b


val _&&_\Bool : Bool & ([] -> Bool) -> Bool
let false _ => false
let true b => b


data If.Bool : Ty -> Ty
let if [A : Ty] : Bool -> If.Bool A
let _.or\Then.Bool [A : Ty] : Then.Bool A & ([] -> Bool) -> If.Bool A


data Then.Bool : Ty -> Ty
let _.then\If.Bool [A : Ty] : If.Bool A & ([] -> A) -> Then.Bool A


val _.else\Then.Bool [A : Ty] : Then.Bool A & ([] -> A) -> A
let (if true .then f) _ => f
let (if false .then _) g => g
let (i .or b .then f) g =>
  i .else of
    match b []
    let true => f
    let false => g
    end


val (?_\Bool) : Bool -> Ty
let a => a = true

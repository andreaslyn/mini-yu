import Fun => yu/basic/Fun

import Eq => yu/basic/Equal
| (=#)


data Bool : Ty
| false : Bool
| true : Bool


val (.ind#Bool) : (b : Bool) & (P : Bool -> Ty) & ([] -> P false) & ([] -> P true) -> P b
let false P x _ => x
let true P _ y => y


val (.rec#Bool) [A : Ty] : (b : Bool) & ([] -> A) & ([] -> A) -> A
let b x y => b .ind (const.Fun A) x y


val (!#Bool) : Bool -> Bool
let true => false
let false => true


val (||#Bool) : Bool & ([] -> Bool) -> Bool
let true _ => true
let false b => b


val (&&#Bool) : Bool & ([] -> Bool) -> Bool
let false _ => false
let true b => b


data If : Ty -> Ty
| if [A : Ty] : Bool -> If A
| (.elif#Then) [A : Ty] : Then A & ([] -> Bool) -> If A


data Then : Ty -> Ty
| (.then#If) [A : Ty] : If A & ([] -> A) -> Then A


val (.else#Then) [A : Ty] : Then A & ([] -> A) -> A
let (if true .then f) _ => f
let (if false .then _) g => g
let (i .elif b .then f) g =>
  i .else of
    case b []
    | true => f
    | false => g
    end


val (?#Bool) : Bool -> Ty
let a => a = true

import "Fun.yu"


data _List\Ty : Ty -> Ty
let nil[A : Ty] : A List
let _::_\_List\Ty[A : Ty] : (A, A List) -> A List


val _ind\_List\Ty[A : Ty] :
  (xs : A List, P : A List -> Ty, P(nil),
    (y : A, ys : A List, P(ys)) -> P(y :: ys)) -> P(xs)
let (nil, P, p0, pi) => p0
let (x :: xs, P, p0, pi) => pi(x, xs, xs ind(P, p0, pi))


val _rec\_List\Ty[A : Ty, B : Ty] :
  (xs : A List, B, (y : A, ys : A List, B) -> B) -> B
let => _ ind(const(B), _, _)

import "Fun.yu"


data List : Ty -> Ty
let nil [A : Ty] : List A
let _::_\List [A : Ty] : A & List A -> List A


val _.ind\List [A : Ty] :
  (xs : List A) &
  (P : List A -> Ty) &
  P nil &
  ((y : A) & (ys : List A) & P ys -> P (y :: ys)) ->
  P(xs)
let nil P p0 pi => p0
let (x :: xs) P p0 pi => pi x xs (xs .ind P p0 pi)


val _.rec\List [A : Ty] [B : Ty] :
  (xs : List A) & B & ((y : A) & List A & B -> B) -> B
let => _ .ind (const B) _ _

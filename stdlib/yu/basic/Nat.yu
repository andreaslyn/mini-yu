import "Fun.yu"


data Nat : Ty
let 0 : Nat
let (++_\Nat) : Nat -> Nat


val 1 : Nat
let => ++ 0

val 2 : Nat
let => ++ 1

val 3 : Nat
let => ++ 2

val 4 : Nat
let => ++ 3

val 5 : Nat
let => ++ 4

val 6 : Nat
let => ++ 5

val 7 : Nat
let => ++ 6

val 8 : Nat
let => ++ 7

val 9 : Nat
let => ++ 8

val 10 : Nat
let => ++ 9


val _ind\Nat :
  (n : Nat, P : Nat -> Ty, P(0), (x : Nat, P(x)) -> P(++ x)) -> P(n)
let (0, P, z, _) => z
let (++ n, P, z, s) => s(n, n ind(P, z, s))

val _rec\Nat[A : Ty] : (Nat, A, (Nat, A) -> A) -> A
let (n, p0, pi) => n ind(const(A), p0, pi)


val _+_\Nat : (Nat, Nat) -> Nat
let (m, 0) => m
let (m, ++ n) => ++ m + n


val _+r_\Nat : (Nat, Nat) -> Nat
let (m, 0) => m
let (m, ++ n) => ++ (m +r n)


val _+l_\Nat : (Nat, Nat) -> Nat
let (0, n) => n
let (++ m, n) => ++ (m +l n)


val _-_\Nat : (Nat, Nat) -> Nat
let (0, _) => 0
let (m, 0) => m
let (++ m, ++ n) => m - n


val _*_\Nat : (Nat, Nat) -> Nat
let (_, 0) => 0
let (m, ++ n) => m * n + m


val _*r_\Nat : (Nat, Nat) -> Nat
let (m, 0) => 0
let (m, ++ n) => m *r n +r m


val _*l_\Nat : (Nat, Nat) -> Nat
let (0, n) => 0
let (++ m, n) => n +l m *l n

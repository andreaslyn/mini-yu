import basic => yu/basic
of (...)

import Prod => yu/Prod/Prod
of (...#Ty)


val (.IsReflexive?#Bool) [A : Ty] : (A & A -> Bool) -> Ty
let R => (x : A) -> ? R x x


val (.IsIrreflexive?#Bool) [A : Ty] : (A & A -> Bool) -> Ty
let R => (x : A) -> ? ! R x x


val (.IsSymmetric?#Bool) [A : Ty] : (A & A -> Bool) -> Ty
let R => (x y : A) & ? R x y -> ? R y x


val (.IsAsymmetric?#Bool) [A : Ty] : (A & A -> Bool) -> Ty
let R => (x y : A) & ? R x y -> ? ! R y x


val (.IsTransitive?#Bool) [A : Ty] : (A & A -> Bool) -> Ty
let R => (x y z : A) & ? R x y & ? R y z -> ? R x z


val (.IsConnex?#Bool) [A : Ty] : (A & A -> Bool) -> Ty
let R => (x y : A) -> ? (R x y || R y x)


val (.IsPreorder?#Bool) [A : Ty] : (A & A -> Bool) -> Ty
let R => R .IsReflexive? && R .IsTransitive?


val (.IsTotalPreorder?#Bool) [A : Ty] : (A & A -> Bool) -> Ty
let R => R .IsConnex? && R .IsTransitive?


val (.IsEquivalence?#Bool) [A : Ty] : (A & A -> Bool) -> Ty
let R => R .IsSymmetric? && R .IsPreorder?

import bN => yu/basic/Nat
of (...)

import NN => yu/Nat/Nat
of (...)

import basic => yu/basic
of (...)


\\\\\\\\\\\\\\\\\\\\\\\\\\ Addition theormes \\\\\\\\\\\\\\\\\\\\\\\\\


val simplOp++Op+ [m n : Nat] : ++ m + n = ++ (m + n)
let [n := 0] => refl
let [n := ++ n] => simplOp++Op+[n := n]


val op+IsOp+r [m n : Nat] : m + n = m +r n
let [n := 0] => refl
let [n := ++ n] => simplOp++Op+ @ op+IsOp+r .ap (++)


val simplOp++Op+r [m n : Nat] : ++ m +r n = ++ (m +r n)
let [n := 0] => refl
let [n := ++ n] => simplOp++Op+r .ap (++)


val simpl0Op+r [n : Nat] : 0 +r n = n
let [n := 0] => refl
let [n := ++ n] => simpl0Op+r .ap (++)


val simpl0Op+ [n : Nat] : 0 + n = n
let => op+IsOp+r @ simpl0Op+r


val commutativeOp+r [m n : Nat] : m +r n = n +r m
let [n := 0] => ! simpl0Op+r
let [n := ++ n] =>
  commutativeOp+r .ap (++) @ ! simplOp++Op+r


val commutativeOp+ [m n : Nat] : m + n = n + m
let => op+IsOp+r @ commutativeOp+r @ ! op+IsOp+r


val associativeOp+r [k m n : Nat] : (k +r m) +r n = k +r (m +r n)
let [n := 0] => refl
let [n := ++ n] => associativeOp+r .ap (++)


val associativeOp+ [k m n : Nat] : (k + m) + n = k + (m + n)
let =>
  op+IsOp+r
  @ op+IsOp+r .ap (t => t +r n)
  @ associativeOp+r
  @ ! op+IsOp+r
  @ (! op+IsOp+r) .ap (t => k + t)


val op+rIsOp+l [m n : Nat] : m +r n = m +l n
let => commutativeOp+r @ aux m n
where
  val aux : (m n : Nat) -> n +r m = m +l n
  let 0 n => refl
  let (++ m) n => aux m n .ap (++)
end


\\\\\\\\\\\\\\\\\\\\\\ Multiplication theormes \\\\\\\\\\\\\\\\\\\\\\\


val op*IsOp*r [m n : Nat] : m * n = m *r n
let [n := 0] => refl
let [n := ++ n] => op+IsOp+r @ op*IsOp*r .ap (t => t +r m)


\\\\\\\\\\\\\\\\\\\\\\\\ Ordering theormes \\\\\\\\\\\\\\\\\\\\\\\\\\\


val op++Is<? [n : Nat] : ? (n <? ++ n)
let [n := 0] => refl
let [n := ++ n] => op++Is<? [n := n]

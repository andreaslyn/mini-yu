
import Fun => yu/basic/Fun
of id

import B => yu/basic/Bool
of Bool
of false
of true
of (...#Bool)

import N => yu/basic/Nat
export
of (...)

import L => yu/basic/List
of List
of nil
of (...#List)

import Eq => yu/basic/Equal
of (=#)
of refl

import Ord => yu/Order/Order
of Order
of (...#Order)

import Eq? => yu/Equivalence?/Equivalence?
of Equivalence?
of (...#Equivalence?)

import Ord? => yu/Ordering?/Ordering?
of Ordering?
of (...#Ordering?)

import Ord?-th => yu/Ordering?/theorems

import relation? => yu/relation?/relation?
of (...#Bool)

import Prod => yu/Prod/Prod
of (&&#Ty)
of ($#)
of (...#DProd.Prod)

import Option => yu/Option/Option
of (?#Ty)
of no
of yes
of (...#Option.Option)


data (.Is++#Nat) : Nat -> Ty
of is++ [n : Nat] : (++ n) .Is++


val (.divmod#Nat) : Nat & (n : Nat) & n .Is++ -> Nat && Nat
let m (++ n) is++ => q $ r := aux m 0 n; q $ (n - r)
where
  val aux : Nat & Nat & Nat -> Nat && Nat
  let 0 q u => q $ u
  let (++ m) q 0 => aux m (++ q) n
  let (++ m) q (++ u) => aux m q u
end


val (.divmod?#Nat) : Nat & Nat -> ? (Nat && Nat)
let _ 0 => no
let m (++ n) => yes at m .divmod (++ n) is++


val (.div?#Nat) : Nat & Nat -> ? Nat
let => m n => m .divmod? n .map (.1)


val (.div#Nat) : Nat & (n : Nat) & n .Is++ -> Nat
let m n D => m .divmod n D .1


val (.mod?#Nat) : Nat & Nat -> ? Nat
let => m n => m .divmod? n .map (.2)


val (.mod#Nat) : Nat & (n : Nat) & n .Is++ -> Nat
let m n D => m .divmod n D .2


val (.isEven#Nat) : Nat -> Bool
let 0 => true
let (++ n) => n .isOdd

val (.isOdd#Nat) : Nat -> Bool
let 0 => false
let (++ n) => n .isEven


val (.cmp#Nat) : Nat & Nat -> Order
let 0 0 => eq.Ord
let 0 (++ _) => lt.Ord
let (++ _) 0 => gt.Ord
let (++ m) (++ n) => m .cmp n


val cmpIsTransitive? : cmpToLe?.Ord? (.cmp#Nat) .IsTransitive?
let 0 _ 0 _ _ => refl
let 0 _ (++ _) _ _ => refl
let (++ _) 0 _ {} _
let (++ _) (++ _) 0 _ {}
let (++ l) (++ m) (++ n) t1 t2 => cmpIsTransitive? l m n t1 t2


val cmpIsCompatible :
  (m n : Nat) -> m .cmp n .lt? = n .cmp m .gt?
let 0 0 => refl
let 0 (++ _) => refl
let (++ _) 0 => refl
let (++ m) (++ n) => cmpIsCompatible m n


val ordering? : Ordering? Nat
let => fromCmp.Ord? (.cmp) cmpIsTransitive? cmpIsCompatible


val equivalence? : Equivalence? Nat
let => ordering? .equivalence?.Ord?-th


val (<?#Nat) : Nat & Nat -> Bool
let => ordering? .lt?

val (<=?#Nat) : Nat & Nat -> Bool
let => ordering? .le?

val (>?#Nat) : Nat & Nat -> Bool
let => ordering? .gt?

val (>=?#Nat) : Nat & Nat -> Bool
let => ordering? .ge?

val (=?#Nat) : Nat & Nat -> Bool
let => equivalence? .eq?

val (!=?#Nat) : Nat & Nat -> Bool
let => equivalence? .neq?


val (.divides#Nat) : (m : Nat) & Nat & m .Is++ -> Bool
let m n D => n .mod m D =? 0


val (.listSmaller#Nat) : Nat -> List Nat
let n => n .rec [A := List Nat -> List Nat] id (m f => t => f (m :: t)) nil

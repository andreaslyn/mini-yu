import Bin+ => yu/Bin+/Bin+
| Bin+
| (...#Bin+)

import Prod => yu/Prod/Prod
| (&&#Ty)
| ($#)
| (...#DProd.Prod)

import B => yu/Bool/Bool
| Bool
| false
| true
| (...#Bool)
| if
| (...#If.B)
| (...#Then.B)

import S => yu/Str/Str
| Str
| (...#Str)

import Ord => yu/Order/Order
| Order
| (...#Order)

import Fun => yu/basic/Fun
| const


data Bin : Ty
| 0 : Bin
| (.inBin#Bin+) : Bin+ -> Bin


val 1 : Bin
let => 1.Bin+ .inBin


val 2 : Bin
let => 2.Bin+ .inBin


val 3 : Bin
let => 3.Bin+ .inBin


val 4 : Bin
let => 4.Bin+ .inBin


val 5 : Bin
let => 5.Bin+ .inBin


val 6 : Bin
let => 6.Bin+ .inBin


val 7 : Bin
let => 7.Bin+ .inBin


val 8 : Bin
let => 8.Bin+ .inBin


val 9 : Bin
let => 9.Bin+ .inBin


val 10 : Bin
let => 10.Bin+ .inBin


val (+++#Bin) : Bin -> Bin+
let 0 => 1.Bin+
let (n .inBin) => ++ n


val (++#Bin) : Bin -> Bin
let n => (+++ n) .inBin


val (---#Bin+) : Bin+ -> Bin
let 1.Bin+ => 0
let n => (-- n) .inBin


val (--#Bin) : Bin -> Bin
let 0 => 0
let (n .inBin) => --- n


val (+#Bin) : Bin & Bin -> Bin
let m 0 => m
let 0 n => n
let (m .inBin) (n .inBin) => (m + n) .inBin


val (*#Bin) : Bin & Bin -> Bin
let _ 0 => 0
let 0 _ => 0
let (m .inBin) (n .inBin) => (m * n) .inBin


val (.divmod2#Bin) : Bin -> Bin && Bool
let 0 => 0 $ false
let (1.Bin+ .inBin) => 0 $ true
let ((n % b) .inBin) => n .inBin $ b


val (*2#Bin) : Bin -> Bin
let 0 => 0
let (n .inBin) => (*2 n) .inBin


val (-toBin#Bin+) : Bin+ & Bin+ -> Bin
let 1.Bin+ _ => 0
let m 1.Bin+ => --- m
let (m % false) (n % false) => *2 (m -toBin n)
let (m % true) (n % true) => *2 (m -toBin n)
let (m % true) (n % false) => ++ *2 (m -toBin n)
let (1.Bin+ % false) (n % true) => 0
let (m % false) (n % true) => ++ *2 (-- m -toBin n)


val (-#Bin) : Bin & Bin -> Bin
let m 0 => m
let 0 _ => 0
let (m .inBin) (n .inBin) => m -toBin n


val (.cmp#Bin) : Bin & Bin -> Order
let 0 0 => eq.Ord
let 0 (_ .inBin) => lt.Ord
let (_ .inBin) 0 => gt.Ord
let (m .inBin) (n .inBin) => m .cmp n


val (<?#Bin) : Bin & Bin -> Bool
let m n => m .cmp n .lt?

val (=?#Bin) : Bin & Bin -> Bool
let m n => m .cmp n .eq?


val (.ind#Bin)
  : (b : Bin) & (P : Bin -> Ty) & P 0 &
      ((x : Bin) & P x -> P (++ x)) -> P b
let 0 P p0 _ => p0
let (n .inBin) P p0 pi => n .ind P' (pi 0 p0) (x a => pi (x .inBin) a)
where
  val P' : Bin+ -> Ty
  let m => P (m .inBin)
end


val (.rec#Bin) [A : Ty] : (b : Bin) & A & (Bin & A -> A) -> A
let n a0 ai => n .ind (const A) a0 ai


val.. (.divmod#Bin) : Bin & Bin -> Bin && Bin
let m n =>
  if (m <? n)
  .then (0 $ m)
  .else of
    q $ r := m .divmod(*2 n);
    if (r <? n)
    .then (*2 q $ r)
    .else (++ *2 q $ (r - n))


val.. (.str#Bin) : Bin -> Str
let n =>
  if (n =? 0) .then "0"
  .elif (n =? 1) .then "1"
  .elif (n =? 2) .then "2"
  .elif (n =? 3) .then "3"
  .elif (n =? 4) .then "4"
  .elif (n =? 5) .then "5"
  .elif (n =? 6) .then "6"
  .elif (n =? 7) .then "7"
  .elif (n =? 8) .then "8"
  .elif (n =? 9) .then "9"
  .else of
    q $ r := n .divmod 10;
    q .str :+: r .str

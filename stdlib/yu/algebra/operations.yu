import "yu/basic/Equal.yu"
import "yu/Prod/Prod.yu"


val _.IsAssociative\_->_ [A : Ty] : (A & A -> A) -> Ty
let f => (x y z : A) -> f x (f y z) = f (f x y) z


val _.HasLeftUnit\_->_ [A : Ty] : (A & A -> A) & A -> Ty
let f u => (x : A) -> f u x = x


val _.HasRightUnit\_->_ [A : Ty] : (A & A -> A) & A -> Ty
let f u => (x : A) -> f x u = x


val _.HasUnit\_->_ [A : Ty] : (A & A -> A) & A -> Ty
let f u => f .HasLeftUnit u && f .HasRightUnit u

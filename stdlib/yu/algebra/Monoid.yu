import "yu/algebra/operations.yu"


data IsMonoid : Ty -> Ty
let is.Monoid[A : Ty] :
  (op : A & A -> A) &
  (unt : A) &
  IsAssociative op &
  (HasUnit op unt) ->
  IsMonoid A


val _.op\IsMonoid [A : Ty] : IsMonoid A -> A & A -> A
let (is.Monoid op _ _ _) => op


val _.unit\IsMonoid [A : Ty] : IsMonoid A -> A
let (is.Monoid _ u _ _) => u


val _.isAssociative\IsMonoid [A : Ty] :
  (M : IsMonoid A) -> IsAssociative (M .op)
let (is.Monoid _ _ a _) => a


val _.hasUnit\IsMonoid [A : Ty] :
  (M : IsMonoid A) -> HasUnit (M .op) (M .unit)
let (is.Monoid _ _ _ h) => h


data Monoid : Ty
let mk.Monoid [A : Ty] : IsMonoid A -> Monoid


val _.Carrier\Monoid : Monoid -> Ty
let (mk.Monoid[A := A] _) => A


val _.isMonoid\Monoid : (M : Monoid) -> IsMonoid (M .Carrier)
let (mk.Monoid h) => h


val _.op\Monoid : (M : Monoid) -> M .Carrier & M .Carrier -> M .Carrier
let M => M .isMonoid .op


val _.unit\Monoid : (M : Monoid) -> M .Carrier
let M => M .isMonoid .unit


val _.isAssociative\Monoid : (M : Monoid) -> IsAssociative (M .op)
let M => M .isMonoid .isAssociative


val _.hasUnit\Monoid : (M : Monoid) -> HasUnit (M .op) (M .unit)
let M => M .isMonoid .hasUnit

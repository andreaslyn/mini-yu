import basic => yu/basic
of (...)

import ops => yu/algebra/operations
of (...)


data IsMonoid : Ty -> Ty
of mkIs [A : Ty] :
  (op : A & A -> A) &
  (unt : A) &
  IsAssociative op &
  (HasUnit op unt) ->
  IsMonoid A


val (.op#IsMonoid) [A : Ty] : IsMonoid A -> A & A -> A
let (mkIs op _ _ _) => op


val (.unit#IsMonoid) [A : Ty] : IsMonoid A -> A
let (mkIs _ u _ _) => u


val (.isAssociative#IsMonoid) [A : Ty] :
  (M : IsMonoid A) -> IsAssociative (M .op)
let (mkIs _ _ a _) => a


val (.hasUnit#IsMonoid) [A : Ty] :
  (M : IsMonoid A) -> HasUnit (M .op) (M .unit)
let (mkIs _ _ _ h) => h


data Monoid : Ty
of mk [A : Ty] : IsMonoid A -> Monoid


val (.Carrier#Monoid) : Monoid -> Ty
let (mk[A := A] _) => A


val (.isMonoid#Monoid) : (M : Monoid) -> IsMonoid (M .Carrier)
let (mk h) => h


val (.op#Monoid) : (M : Monoid) -> M .Carrier & M .Carrier -> M .Carrier
let M => M .isMonoid .op


val (.unit#Monoid) : (M : Monoid) -> M .Carrier
let M => M .isMonoid .unit


val (.isAssociative#Monoid) : (M : Monoid) -> IsAssociative (M .op)
let M => M .isMonoid .isAssociative


val (.hasUnit#Monoid) : (M : Monoid) -> HasUnit (M .op) (M .unit)
let M => M .isMonoid .hasUnit

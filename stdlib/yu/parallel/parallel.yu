import Lazy => yu/Lazy
of Lazy
of lazy

import Sum => yu/Sum/Sum
of (||#Ty)

import S => yu/Str/Str
of Str


extern parallelAxiom' : (A : Ty) & ({} ->> A) ->> Lazy (Str || A)


val parallel' [A : Ty] : ({} ->> A) ->> Lazy (Str || A)
let x => parallelAxiom' A x


extern parallelAxiom : (A : Ty) & ({} -> A) -> Lazy (Str || A)


val parallel [A : Ty] : ([] -> A) -> Lazy (Str || A)
let x => parallelAxiom A (_ => x)

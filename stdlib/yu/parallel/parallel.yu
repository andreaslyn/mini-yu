import "yu/Sum/Sum.yu"
import "yu/Str/Str.yu"


extern parallel'.parallel : (A : Ty, () ->> A) ->> [] -> Str | A


val parallel'[A : Ty] : (() ->> A) ->> [] -> Str | A
let (x) => parallel'.parallel(A, x)[]


extern parallel.parallel : (A : Ty, () -> A) -> [] -> Str | A


val parallel[A : Ty] : ([] -> A) -> [] -> Str | A
let (x) => parallel.parallel(A, (). x[])[]

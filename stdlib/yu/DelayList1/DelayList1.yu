
data DelayList1 : Ty -> Ty
of one [A : Ty] : A -> DelayList1 A
of (::#DelayList1) [A : Ty] : A & (() -> DelayList1 A) -> DelayList1 A


val (.map#DelayList1) [A : Ty] [B : Ty] :
  DelayList1 A & (A -> B) -> DelayList1 B
let (one x) f => one (f x)
let (x :: xs) f => f x :: xs () .map f


val.. (.tournament#DelayList1) [A : Ty] : DelayList1 A & (A & A -> A) -> A
let (one x) _ => x
let (x :: as) f => pairHead (as ()) x .tournament f
where
  val pairHead : DelayList1 A & A -> DelayList1 A
  let (one x) y => one (f x y)
  let (x :: as) y => f x y :: pair (as ())

  val pair : DelayList1 A -> DelayList1 A
  let (x :: as) => pairHead (as ()) x
  let (as) => as
end

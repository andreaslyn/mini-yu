
import Fun => yu/basic/Fun
of const

import B => yu/Bool/Bool
of Bool
of false
of true
of (...#Bool)

import S => yu/Str/Str
of Str
of (...#Str)

import Ord => yu/Order/Order
of Order
of (...#Order)

import Eq => yu/basic/Equal
of (=#)
of refl
of (...#Equal.Eq)


data Bin+ : Ty
of 1 : Bin+
of (%#Bin+) : Bin+ & Bool -> Bin+


val 2 : Bin+
let => 1 % false


val 3 : Bin+
let => 1 % true


val 4 : Bin+
let => 1 % false % false


val 5 : Bin+
let => 1 % false % true


val 6 : Bin+
let => 1 % true % false


val 7 : Bin+
let => 1 % true % true


val 8 : Bin+
let => 1 % false % false % false


val 9 : Bin+
let => 1 % false % false % true


val 10 : Bin+
let => 1 % false % true % false


val (++#Bin+) : Bin+ -> Bin+
let 1 => 2
let (n % false) => n % true
let (n % true) => ++ n % false


val (+#Bin+) : Bin+ & Bin+ -> Bin+
let 1 n => ++ n
let m 1 => ++ m
let (m % a) (n % false) => (m + n) % a
let (m % false) (n % b) => (m + n) % b
let (m % true) (n % true) => ++ (m + n) % false


val (*#Bin+) : Bin+ & Bin+ -> Bin+
let m 1 => m
let m (n % false) => (m * n) % false
let m (n % true) => ((m * n) % false) + m


val (--#Bin+) : Bin+ -> Bin+
let 1 => 1
let (n % true) => n % false
let (1 % false) => 1
let (n % false) => -- n % true


val (.cmp#Bin+) : Bin+ & Bin+ -> Order
let 1 1 => eq.Ord
let (_ % _) 1 => gt.Ord
let 1 (_ % _) => lt.Ord
let (m % false) (n % false) => m .cmp n
let (m % true) (n % true) => m .cmp n
let (m % false) (n % true) =>
  case m .cmp n
  of gt.Ord => gt.Ord
  of _ => lt.Ord
  end
let (m % true) (n % false) =>
  case m .cmp n
  of lt.Ord => lt.Ord
  of _ => gt.Ord
  end


val (.simplOp++Op--#Bin+)
  : (n : Bin+) & (b : Bool) -> ++ -- (n % b) = n % b
let n true => refl
let 1 false => refl
let (n % a) false => n .simplOp++Op-- a .ap (t => t % false)


val (.simplOp--Op++#Bin+) : (n : Bin+) -> -- ++ n = n
let 1 => refl
let (_ % false) => refl
let (1 % true) => refl
let (n % true % true) => (n % true) .simplOp--Op++ .ap (t => t % true)
let (n % false % true) => (n % false) .simplOp--Op++ .ap (t => t % true)

import S => yu/Str/Str
of Str
of (...#Str)

import L => yu/List/List
of List
of (...#List)

import C => yu/Char/Char
of Char

import N => yu/Nat/Nat
of Nat

import B => yu/Bool/Bool
of Bool

import SS => yu/Str/StrStr
of (.str#Nat)
of (.str#Bool)
of (.str#Char)

import basic => yu/basic
of (@compose#)
of id


data PreFormat : Ty
of natPreFormat : PreFormat -> PreFormat
of strPreFormat : PreFormat -> PreFormat
of charPreFormat : PreFormat -> PreFormat
of boolPreFormat : PreFormat -> PreFormat
of constPreFormat : Char & PreFormat -> PreFormat
of nilPreFormat : PreFormat
of errorPreFormat : PreFormat


val (.map#PreFormat) :
  PreFormat & (PreFormat -> PreFormat) -> PreFormat
let errorPreFormat _ => errorPreFormat
let p f => f p


val listPreFormat : List Char -> PreFormat
let (nil.L) => nilPreFormat
let ('%.C :: 'n.C :: cs) => listPreFormat cs .map natPreFormat
let ('%.C :: 's.C :: cs) => listPreFormat cs .map strPreFormat
let ('%.C :: 'c.C :: cs) => listPreFormat cs .map charPreFormat
let ('%.C :: 'b.C :: cs) => listPreFormat cs .map boolPreFormat
let ('%.C :: '%.C :: cs) => listPreFormat cs .map (constPreFormat '%.C)
let ('%.C :: _ :: cs) => errorPreFormat
let (c :: cs) => listPreFormat cs .map (constPreFormat c)


val (.preFormat#Str) : Str -> PreFormat
let => listPreFormat @compose (.list#Str)


val (.Format#PreFormat) : PreFormat -> Ty
let (natPreFormat p) => Nat -> p .Format
let (strPreFormat p) => Str -> p .Format
let (charPreFormat p) => Char -> p .Format
let (boolPreFormat p) => Bool -> p .Format
let (constPreFormat _ p) => p .Format
let errorPreFormat => {}
let nilPreFormat => Str


val formatAccum : (p : PreFormat) & (Str -> Str) -> p .Format
let (natPreFormat p) a => n => formatAccum p (t => a (n .str :+: t))
let (strPreFormat p) a => s => formatAccum p (t => a (s :+: t))
let (charPreFormat p) a => c => formatAccum p (t => a (c .str :+: t))
let (boolPreFormat p) a => b => formatAccum p (t => a (b .str :+: t))
let (constPreFormat c p) a => formatAccum p (t => a (c .str :+: t))
let errorPreFormat _ => ()
let nilPreFormat a => a ""


val (.format#PreFormat) : (p : PreFormat) -> p .Format
let p => formatAccum p id


val (.Format#Str) : Str -> Ty
let s => s .preFormat .Format


val (.format#Str) : (s : Str) -> s .Format
let s => s .preFormat .format

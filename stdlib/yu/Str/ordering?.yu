import Str => yu/Str/Str
of Str
of (...#Str)

import C => yu/Char/Char

import Eq => yu/basic/Equal
of (=#)

import List-th => yu/List/theorems

import Ord => yu/Order/Order
of Order
of (...#Order)

import B => yu/Bool/Bool
of Bool

import relation? => yu/relation?/relation?
of (...#Bool)

import Ord? => yu/Ordering?/Ordering?
of Ordering?
of (...#Ordering?)

import Ord?-th => yu/Ordering?/theorems
of (...#Ordering?)

import Equivalence? => yu/Equivalence?/Equivalence?
of Equivalence?
of (...#Equivalence?)


val cmpIsTransitive? : cmpToLe?.Ord? (.cmp#Str) .IsTransitive?
let r s t lrs lst =>
  (cmpIsTransitive?.List-th ordering?.C)
    (r .list) (s .list) (t .list) lrs lst


val cmpIsCompatible : (r s : Str) -> r .cmp s .lt? = s .cmp r .gt?
let r s => (cmpIsCompatible.List-th ordering?.C) (r .list) (s .list)


val ordering? : Ordering? Str
let => fromCmp.Ord? (.cmp#Str) cmpIsTransitive? cmpIsCompatible


val equivalence? : Equivalence? Str
let => ordering? .equivalence?


val (=?#Str) : Str & Str -> Bool
let => equivalence? .eq?

val (!=?#Str) : Str & Str -> Bool
let => equivalence? .neq?

val (<?#Str) : Str & Str -> Bool
let => ordering? .lt?

val (>?#Str) : Str & Str -> Bool
let => ordering? .gt?

val (<=?#Str) : Str & Str -> Bool
let => ordering? .le?

val (>=?#Str) : Str & Str -> Bool
let => ordering? .ge?

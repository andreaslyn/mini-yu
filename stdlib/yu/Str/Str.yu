import L => yu/List/List
of List
of (...#List)

import C => yu/Char/Char
of Char
of (...#Char)

import Ord => yu/Order/Order
of Order


data Str : Ty
of mk : List Char -> Str


val (.list#Str) : Str -> List Char
let (mk cs) => cs


val nil : Str
let => mk nil.L


val one : Char -> Str
let c => mk (c :: nil.L)


val (.modify#Str) : Str & (List Char -> List Char) -> Str
let (mk cs) f => mk (f cs)


val (.accum#Str) [A : Ty] : Str & A & (A & Char -> A) -> A
let s x f => s .list .accum x f


val (.fold#Str) [A : Ty] : Str & A & (Char & A -> A) -> A
let s x f => s .list .fold x f


val (::#Str) : Char & Str -> Str
let c s => s .modify (cs => c :: cs)


val (:+:#Str) : Str & Str -> Str
let s1 s2 => s1 .modify (t => t :+: s2 .list)


val (.rev#Str) : Str -> Str
let s => s .modify (.rev)


val (.Is::#Str) : Str -> Ty
let s => s .list .Is::


val (.All#Str) : Str & (Char -> Ty) -> Ty
let s P => s .list .All P


val (.toUpper#Str) : Str -> Str
let s => s .modify (cs => cs .map (.toUpper))


val (.toLower#Str) : Str -> Str
let s => s .modify (cs => cs .map (.toLower))


val (.cmp#Str) : Str & Str -> Order
let s t => s .list .cmp (t .list) ordering?.C

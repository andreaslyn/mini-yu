import Bool => yu/Bool/Bool
| (...)

import basic => yu/basic
| (...)

import Prod => yu/Prod/Prod
| ($#)
| (...#Ty)

import Sum => yu/Sum/Sum
| in1
| in2
| (||#Ty)


val true!=false : true != false
let {}

val false!=true : false != true
let {}


val involutionOp! [b : Bool] : ! ! b = b
let [b := true] => refl
let [b := false] => refl


val commutativeOp|| [a b : Bool] : a || b = b || a
let [a := true] [b := true] => refl
let [a := true] [b := false] => refl
let [a := false] [b := true] => refl
let [a := false] [b := false] => refl


val simplOp||true [b : Bool] : ? (b || true)
let [b := true] => refl
let [b := false] => refl


val commutativeOp&& [a b : Bool] : a && b = b && a
let [a := true] [b := true] => refl
let [a := true] [b := false] => refl
let [a := false] [b := true] => refl
let [a := false] [b := false] => refl


val op<->ToOp= [b c : Bool] : ? b <-> ? c -> b = c
let [b := true] [c := true](_) => refl
let [b := false] [c := false](_) => refl
let [b := true] [c := false](f $ _) => case f refl | {} end
let [b := false] [c := true](_ $ g) => case g refl | {} end


val op=ToOp<-> [b c : Bool] : b = c -> ? b <-> ? c
let refl => id $ id


val pushInOp! [b : Bool] : ! ? b -> ? ! b
let [b := true] f => f refl .rec
let [b := false] _ => refl


val pullOutOp! [b : Bool] : ? ! b -> ! ? b
let [b := true] {}
let [b := false] _ => e => case e | {} end


val op!ToOp?false [b : Bool] : ? ! b -> ?false b
let [b := true] {}
let [b := false] _ => refl


val op?falseToOp! [b : Bool] : ?false b -> ? ! b
let [b := true] {}
let [b := false] _ => refl


val pushInOp|| [a b : Bool] : (? a || ? b) -> ? (a || b)
let (in1 refl) => refl
let (in2 refl) => simplOp||true


val pullOutOp|| [a b : Bool] : ? (a || b) -> ? a || ? b
let [a := true] _ => in1 refl
let [b := true] _ => in2 refl
let [a := false] [b := false] {}


val pushInOp&& [a b : Bool] : (? a && ? b) -> ? (a && b)
let [a := false] ({} $ _)
let [b := false] (_ $ {})
let [a := true] [b := true] _ => refl


val pullOutOp&& [a b : Bool] : ? (a && b) -> ? a && ? b
let [a := false] {}
let [a := true] [b := false] {}
let [a := true] [b := true] _ => refl $ refl

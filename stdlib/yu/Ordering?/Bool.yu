import B => yu/Bool/Bool
of Bool
of false
of true
of (...#Bool)

import Eq => yu/basic/Equal
of (=#)
of refl

import relation? => yu/relation?/relation?
of (...#Bool)

import Ord => yu/Order/Order
of Order
of (...#Order)

import Eq? => yu/Equivalence?/Equivalence?
of Equivalence?
of (...#Equivalence?)

import Ord? => yu/Ordering?/Ordering?
of Ordering?
of (...#Ordering?)

import Ord?-th => yu/Ordering?/theorems
of (...#Ordering?)


val cmpIsTransitive? : cmpToLe?.Ord? (.cmp#Bool) .IsTransitive?
let false _ false _ _ => refl
let false _ true _ _ => refl
let true false _ {} _
let true true false _ {}
let true true true _ _ => refl


val cmpIsCompatible :
  (a : Bool) & (b : Bool) -> a .cmp b .lt? = b .cmp a .gt?
let false false => refl
let false true => refl
let true false => refl
let true true => refl


val ordering? : Ordering? Bool
let => fromCmp.Ord? (.cmp) cmpIsTransitive? cmpIsCompatible

val equivalence? : Equivalence? Bool
let => ordering? .equivalence?

val (=?#Bool) : Bool & Bool -> Bool
let => equivalence? .eq?

val (!=?#Bool) : Bool & Bool -> Bool
let => equivalence? .neq?

val (<?#Bool) : Bool & Bool -> Bool
let => ordering? .lt?

val (>?#Bool) : Bool & Bool -> Bool
let => ordering? .gt?

val (<=?#Bool) : Bool & Bool -> Bool
let => ordering? .le?

val (>=?#Bool) : Bool & Bool -> Bool
let => ordering? .ge?


import B => yu/Bool/Bool
of Bool
of (...#Bool)
of if
of (.then#If.B)
of (.elif#Then.B)
of (.else#Then.B)

import B-th => yu/Bool/theorems

import basic => yu/basic
of (=#)
of refl
of (...#Equal.basic)
of (@compose#)
of flip

import Ord => yu/Order/Order
of Order
of (...#Order)

import Ord-th => yu/Order/theorems
of (...#Order)

import Prod => yu/Prod/Prod
of ($#)
of (...#DProd.Prod)

import relation? => yu/relation?/relation?
of (...#Bool)


data OrderRelation? : Ty -> Ty
of mkRel [A : Ty] :
  (le : A & A -> Bool) &
  (lt : A & A -> Bool) &
  (eq : A & A -> Bool) &
  (cmp : A & A -> Order) ->
  OrderRelation? A


val (.cmp#OrderRelation?) [A : Ty] : OrderRelation? A -> A & A -> Order
let (mkRel _ _ _ cmp) => cmp

val (.le?#OrderRelation?) [A : Ty] : OrderRelation? A -> A & A -> Bool
let (mkRel le _ _ _) => le

val (.ge?#OrderRelation?) [A : Ty] : OrderRelation? A -> A & A -> Bool
let R => x y => R .le? y x

val (.lt?#OrderRelation?) [A : Ty] : OrderRelation? A -> A & A -> Bool
let (mkRel _ lt _ _) => lt

val (.gt?#OrderRelation?) [A : Ty] : OrderRelation? A -> A & A -> Bool
let R => x y => R .lt? y x

val (.eq?#OrderRelation?) [A : Ty] : OrderRelation? A -> A & A -> Bool
let (mkRel _ _ eq _) => eq

val (.neq?#OrderRelation?) [A : Ty] : OrderRelation? A -> A & A -> Bool
let R => x y => ! R .eq? x y


val cmpToLt? [A : Ty] : (A & A -> Order) -> A & A -> Bool
let C => x y => C x y .lt?

val cmpToEq? [A : Ty] : (A & A -> Order) -> A & A -> Bool
let C => x y => C x y .eq?

val cmpToGt? [A : Ty] : (A & A -> Order) -> A & A -> Bool
let C => x y => C x y .gt?

val cmpToNeq? [A : Ty] : (A & A -> Order) -> A & A -> Bool
let C => x y => ! cmpToEq? C x y

val cmpToGe? [A : Ty] : (A & A -> Order) -> A & A -> Bool
let C => x y => ! cmpToLt? C x y

val cmpToLe? [A : Ty] : (A & A -> Order) -> A & A -> Bool
let C => x y => ! cmpToGt? C x y


val leToCmpImpl : Bool & Bool -> Order
let lexy leyx =>
  if (! lexy)
  .then gt.Ord
  .elif leyx
  .then eq.Ord
  .else lt.Ord


val leToCmp [A : Ty] : (A & A -> Bool) -> A & A -> Order
let le => x y => leToCmpImpl (le x y) (le y x)

val leToLt? [A : Ty] : (A & A -> Bool) -> A & A -> Bool
let le => x y => ! le y x

val leToEq? [A : Ty] : (A & A -> Bool) -> A & A -> Bool
let le => x y => le x y && le y x

val leToNeq? [A : Ty] : (A & A -> Bool) -> A & A -> Bool
let le => x y => ! leToEq? le x y

val leToGt? [A : Ty] : (A & A -> Bool) -> A & A -> Bool
let le => x y => leToLt? le y x

val leToGe? [A : Ty] : (A & A -> Bool) -> A & A -> Bool
let le => x y => le y x


data IsOrdering? [A : Ty] : OrderRelation? A -> Ty
of mkIs [A : Ty] [R : OrderRelation? A] :
  (R .le? .IsTotalPreorder?) &
  ((x y : A) -> R .cmp x y = leToCmp (R .le?) x y) &
  ((x y : A) -> R .lt? x y = leToLt? (R .le?) x y) &
  ((x y : A) -> R .eq? x y = leToEq? (R .le?) x y) ->
  IsOrdering? R

val (.leIsTotalPreorder#IsOrdering?) [A : Ty] [R : OrderRelation? A] :
  IsOrdering? R -> R .le? .IsTotalPreorder?
let (mkIs isLe _ _ _) => isLe

val (.leIsTransitive?#IsOrdering?) [A : Ty] [R : OrderRelation? A] :
  IsOrdering? R -> R .le? .IsTransitive?
let (C) => C .leIsTotalPreorder .2

val (.leIsConnex?#IsOrdering?) [A : Ty] [R : OrderRelation? A] :
  IsOrdering? R -> R .le? .IsConnex?
let (C) => C .leIsTotalPreorder .1

val (.cmpIsCompatible#IsOrdering?) [A : Ty] [R : OrderRelation? A] :
  IsOrdering? R -> (x y : A) -> R .cmp x y = leToCmp (R .le?) x y
let (mkIs _ isCmp _ _) => isCmp

val (.ltIsCompatible#IsOrdering?) [A : Ty] [R : OrderRelation? A] :
  IsOrdering? R -> (x y : A) -> R .lt? x y = leToLt? (R .le?) x y
let (mkIs _ _ isLt _) => isLt

val (.eqIsCompatible#IsOrdering?) [A : Ty] [R : OrderRelation? A] :
  IsOrdering? R -> (x y : A) -> R .eq? x y = leToEq? (R .le?) x y
let (mkIs _ _ _ isEq) => isEq


data Ordering? : Ty -> Ty
of mk [A : Ty] :
  (R : OrderRelation? A) & IsOrdering? R -> Ordering? A

val (.ordering#Ordering?) [A : Ty] : Ordering? A -> OrderRelation? A
let (mk R _) => R

val (.isOrdering?#Ordering?) [A : Ty] :
  (R : Ordering? A) -> IsOrdering? (R .ordering)
let (mk R isR) => isR

val (.cmp#Ordering?) [A : Ty] : Ordering? A -> A & A -> Order
let R => R .ordering .cmp

val (.le?#Ordering?) [A : Ty] : Ordering? A -> A & A -> Bool
let R => R .ordering .le?

val (.ge?#Ordering?) [A : Ty] : Ordering? A -> A & A -> Bool
let R => R .ordering .ge?

val (.lt?#Ordering?) [A : Ty] : Ordering? A -> A & A -> Bool
let R => R .ordering .lt?

val (.gt?#Ordering?) [A : Ty] : Ordering? A -> A & A -> Bool
let R => R .ordering .gt?

val (.eq?#Ordering?) [A : Ty] : Ordering? A -> A & A -> Bool
let R => R .ordering .eq?

val (.neq?#Ordering?) [A : Ty] : Ordering? A -> A & A -> Bool
let R => R .ordering .neq?


val (.leIsTransitive?#Ordering?) [A : Ty] :
  (R : Ordering? A) -> R .le? .IsTransitive?
let R => R .isOrdering? .leIsTransitive?

val (.leIsConnex?#Ordering?) [A : Ty] :
  (R : Ordering? A) -> R .le? .IsConnex?
let R => R .isOrdering? .leIsConnex?


val (.setCmp#Ordering?) [A : Ty] :
  (R : Ordering? A) &
  (cmp : A & A -> Order) &
  ((x y : A) -> cmp x y = R .cmp x y) ->
  Ordering? A
let R cmp isCmp =>
  mk (mkRel (R .le?) (R .lt?) (R .eq?) cmp) \
  mkIs
    (R .isOrdering? .leIsTotalPreorder)
    isCmp'
    (R .isOrdering? .ltIsCompatible)
    (R .isOrdering? .eqIsCompatible)
where
  val isCmp' : (x y : A) -> cmp x y = leToCmp (R .le?) x y
  let x y => isCmp x y @ R .isOrdering? .cmpIsCompatible x y
end


val (.setLt#Ordering?) [A : Ty] :
  (R : Ordering? A) &
  (lt : A & A -> Bool) &
  ((x y : A) -> lt x y = R .lt? x y) ->
  Ordering? A
let R lt isLt =>
  mk (mkRel (R .le?) lt (R .eq?) (R .cmp)) \
  mkIs
    (R .isOrdering? .leIsTotalPreorder)
    (R .isOrdering? .cmpIsCompatible)
    isLt'
    (R .isOrdering? .eqIsCompatible)
where
  val isLt' : (x y : A) -> lt x y = leToLt? (R .le?) x y
  let x y => isLt x y @ R .isOrdering? .ltIsCompatible x y
end


val (.setEq#Ordering?) [A : Ty] :
  (R : Ordering? A) &
  (eq : A & A -> Bool) &
  ((x y : A) -> eq x y = R .eq? x y) ->
  Ordering? A
let R eq isEq =>
  mk (mkRel (R .le?) (R .lt?) eq (R .cmp)) \
  mkIs
    (R .isOrdering? .leIsTotalPreorder)
    (R .isOrdering? .cmpIsCompatible)
    (R .isOrdering? .ltIsCompatible)
    isEq'
where
  val isEq' : (x y : A) -> eq x y = leToEq? (R .le?) x y
  let x y => isEq x y @ R .isOrdering? .eqIsCompatible x y
end


val (.setLe#Ordering?) [A : Ty] :
  (R : Ordering? A) &
  (le : A & A -> Bool) &
  ((x y : A) -> le x y = R .le? x y) ->
  Ordering? A
let R le isLe =>
  mk
    (mkRel le (R .lt?) (R .eq?) (R .cmp))
    (mkIs isTP isCmp isLt isEq)
where
  val isCon : le .IsConnex?
  let x y =>
    isLe x y .rew (t => ? (t || le y x)) \
    isLe y x .rew (t => ? (R .le? x y || t)) \
    R .isOrdering? .leIsTotalPreorder .1 x y

  val isTra : le .IsTransitive?
  let x y z lexy leyz =>
    lexy' := isLe x y .resp (?) lexy;
    leyz' := isLe y z .resp (?) leyz;
    isLe x z .rew (?) \
    R .isOrdering? .leIsTotalPreorder .2 x y z lexy' leyz'

  val isTP : le .IsTotalPreorder?
  let => isCon $ isTra

  val isCmp : (x y : A) -> R .cmp x y = leToCmp le x y
  let x y =>
    isLe x y .rew (flip G (le y x)) \
    isLe y x .rew (G (R .le? x y)) \
    R .isOrdering? .cmpIsCompatible x y
  where
    val G : Bool & Bool -> Ty
    let a b => R .cmp x y = leToCmpImpl a b
  end

  val isLt : (x y : A) -> R .lt? x y = leToLt? le x y
  let x y =>
    isLe y x .rew (t => R .lt? x y = ! t) \
    R .isOrdering? .ltIsCompatible x y

  val isEq : (x y : A) -> R .eq? x y = leToEq? le x y
  let x y =>
    isLe x y .rew (flip G (le y x)) \
    isLe y x .rew (G (R .le? x y)) \
    R .isOrdering? .eqIsCompatible x y
  where
    val G : Bool & Bool -> Ty
    let a b => R .eq? x y = a && b
  end
end


val fromLe [A : Ty] :
  (le : A & A -> Bool) & le .IsTotalPreorder? -> Ordering? A
let le isLe =>
  mk
    (mkRel
      le
      (leToLt? le)
      (leToEq? le)
      (leToCmp le)) \
  mkIs isLe (x y => refl) (x y => refl) (x y => refl)


val cmpToLeToLt? [A : Ty] : (A & A -> Order) -> A & A -> Bool
let => leToLt? @compose cmpToLe?

val cmpToLt?IsCompatible [A : Ty] :
  (cmp : A & A -> Order) &
  ((x y : A) ->
    cmpToLt? cmp x y = cmpToGt? cmp y x) ->
  (x y : A) ->
  cmpToLt? cmp x y = cmpToLeToLt? cmp x y
let cmp isC => x y => isC x y @ ! involutionOp!.B-th


val cmpToLeToEq? [A : Ty] : (A & A -> Order) -> A & A -> Bool
let => leToEq? @compose cmpToLe?

val cmpToEq?IsCompatible [A : Ty] :
  (cmp : A & A -> Order) &
  ((x y : A) ->
    cmpToLt? cmp x y = cmpToGt? cmp y x) ->
  (x y : A) ->
  cmpToEq? cmp x y = cmpToLeToEq? cmp x y
let cmp isC => x y =>
  cmp x y .notGtIsLtOrEq .rew
    (t => cmp x y .eq? = t && ! cmp y x .gt?) \
  cmp y x .notGtIsLtOrEq .rew
    (t => cmp x y .eq? = (cmp x y .lt? || cmp x y .eq?) && t) \
  isC y x .rew
    (t =>
      cmp x y .eq?
      = (cmp x y .lt? || cmp x y .eq?) && (t || cmp y x .eq?)) \
  eqSym (isC y x) (! isC x y) (cmp y x) (cmp x y) .rew
    (t =>
      cmp x y .eq?
      = (cmp x y .lt? || cmp x y .eq?) && (cmp x y .gt? || t)) \
  cmp x y .ind
    (c => c .eq? = (c .lt? || c .eq?) && (c .gt? || c .eq?))
    refl refl refl
where
  val eqSym :
    (c .lt? = d .gt?) &
    (c .gt? = d .lt?) &
    (c : Order) &
    (d : Order) ->
    c .eq? = d .eq?
  let _ _ lt.Ord lt.Ord => refl
  let {} _ lt.Ord eq.Ord
  let _ _ lt.Ord gt.Ord => refl
  let _ {} eq.Ord lt.Ord
  let _ _ eq.Ord eq.Ord => refl
  let {} _ eq.Ord gt.Ord
  let _ _ gt.Ord lt.Ord => refl
  let _ {} gt.Ord eq.Ord
  let _ _ gt.Ord gt.Ord => refl
end


val cmpToLeToCmp [A : Ty] : (A & A -> Order) -> A & A -> Order
let => leToCmp @compose cmpToLe?

val cmpToCmpIsCompatible [A : Ty] :
  (cmp : A & A -> Order) &
  ((x y : A) ->
    cmpToLt? cmp x y = cmpToGt? cmp y x) ->
  (x y : A) ->
  cmp x y = cmpToLeToCmp cmp x y
let cmp isC => x y =>
  (! isC x y) .rew
    (a => cmp x y = leToCmpImpl (! cmp x y .gt?) (! a)) \
  cmp x y .ind
    (c => c = leToCmpImpl (! c .gt?) (! c .lt?)) refl refl refl


val cmpToLeIsConnex? [A : Ty] :
  (cmp : A & A -> Order) &
  ((x y : A) ->
    cmpToLt? cmp x y = cmpToGt? cmp y x) ->
  cmpToLe? cmp .IsConnex?
let cmp isC => x y =>
  isC x y .resp (b => ? (! cmp x y .gt? || ! b)) \
  cmp x y .ind (c => ? (! c .gt? || ! c .lt?)) refl refl refl


val fromCmp [A : Ty] :
  (cmp : A & A -> Order) &
  (cmpToLe? cmp .IsTransitive?) &
  ((x y : A) ->
    cmpToLt? cmp x y = cmpToGt? cmp y x) ->
  Ordering? A
let cmp isT isC =>
  fromLe (cmpToLe? cmp) isLe
  .setLt (cmpToLt? cmp) (cmpToLt?IsCompatible cmp isC)
  .setEq (cmpToEq? cmp) (cmpToEq?IsCompatible cmp isC)
  .setCmp cmp (cmpToCmpIsCompatible cmp isC)
where
  val isLe : cmpToLe? cmp .IsTotalPreorder?
  let => cmpToLeIsConnex? cmp isC $ isT
end

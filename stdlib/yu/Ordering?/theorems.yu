import basic => yu/basic
| Empty
| (...#Empty)
| Bool
| false
| true
| (...#Bool)
| (=#)
| (...#Equal.basic)
| refl
| const

import B-th => yu/Bool/theorems
| (...#Bool)

import Prod => yu/Prod/Prod
| ($#)
| (...#DProd.Prod)

import Sum => yu/Sum/Sum
| (||#Ty)

import relation? => yu/relation?/relation?
| (...#Bool)

import Ord => yu/Order/Order
| Order
| (...#Order)

import Ord? => yu/Ordering?/Ordering?
| IsOrdering?
| (...#IsOrdering?)
| Ordering?
| (...#Ordering?)

import Eq? => yu/Equivalence?/Equivalence?
| Equivalence?
| (...#Equivalence?)


val leToEqIsReflexive? [A : Ty] :
  (le : A & A -> Bool) & le .IsTotalPreorder? ->
  leToEq?.Ord? le .IsReflexive?
let le (isC $ _) => x =>
  case pullOutOp||.B-th (isC x x)
  | in1.Sum h => h .rew (t => ? (t && t)) refl
  | in2.Sum h => h .rew (t => ? (t && t)) refl
  end


val (.eqIsReflexive?#Ordering?) [A : Ty] :
  (R : Ordering? A) -> R .eq? .IsReflexive?
let R => x =>
  R .isOrdering? .eqIsCompatible x x .rew (?) of
  leToEqIsReflexive? (R .le?) (R .isOrdering? .leIsTotalPreorder) x


val leToEqIsSymmetric? [A : Ty] :
  (le : A & A -> Bool) & le .IsTotalPreorder? ->
  leToEq?.Ord? le .IsSymmetric?
let le isLe => x y eqxy =>
  b := pullOutOp&&.B-th eqxy;
  pushInOp&&.B-th (b .2 $ b .1)


val (.eqIsSymmetric#Ordering?) [A : Ty] :
  (R : Ordering? A) -> R .eq? .IsSymmetric?
let R => x y eqxy =>
  R .isOrdering? .eqIsCompatible y x .rew (?) of
  leToEqIsSymmetric? (R .le?) (R .isOrdering? .leIsTotalPreorder)
    x y (R .isOrdering? .eqIsCompatible x y .resp (?) eqxy)


val leToEqIsTransitive? [A : Ty] :
  (le : A & A -> Bool) & le .IsTotalPreorder? ->
  leToEq?.Ord? le .IsTransitive?
let le (_ $ isT) => x y z eqxy eqyz =>
  eqxy' := pullOutOp&&.B-th eqxy;
  eqyz' := pullOutOp&&.B-th eqyz;
  l := isT x y z (eqxy' .1) (eqyz' .1);
  r := isT z y x (eqyz' .2) (eqxy' .2);
  pushInOp&&.B-th (l $ r)


val (.eqIsTransitive?#Ordering?) [A : Ty] :
  (R : Ordering? A) -> R .eq? .IsTransitive?
let R => x y z eqxy eqyz =>
  R .isOrdering? .eqIsCompatible x z .rew (?) of
  leToEqIsTransitive?
    (R .le?) (R .isOrdering? .leIsTotalPreorder)
    x y z
    (R .isOrdering? .eqIsCompatible x y .resp (?) eqxy)
    (R .isOrdering? .eqIsCompatible y z .resp (?) eqyz)


val leToEqIsEquivalence? [A : Ty] :
  (le : A & A -> Bool) & le .IsTotalPreorder? ->
  leToEq?.Ord? le .IsEquivalence?
let le isLe =>
    leToEqIsSymmetric? le isLe
  $ leToEqIsReflexive? le isLe
  $ leToEqIsTransitive? le isLe


val (.eqIsEquivalence?#Ordering?) [A : Ty] :
  (R : Ordering? A) -> R .eq? .IsEquivalence?
let R => R .eqIsSymmetric $ R .eqIsReflexive? $ R .eqIsTransitive?


val (.equivalence?#Ordering?) [A : Ty] : Ordering? A -> Equivalence? A
let R => mk.Eq? (R .eq?) (R .eqIsEquivalence?)


val leToLtIsTransitive? [A : Ty] :
  (le : A & A -> Bool) & le .IsTotalPreorder? ->
  leToLt?.Ord? le .IsTransitive?
let le (isC $ isT) => x y z ltxy ltyz =>
  le z x .ind
    (b => (? b -> Empty) -> ? ! b)
    (const refl) (c => c refl .rec)
    (contra x y z ltxy ltyz)
where
  val contra :
    (x y z : A) & ? ! le y x & ? ! le z y & ? le z x -> Empty
  let x y z ltxy ltyz lezx =>
    c := isC x y;
    c' := pullOutOp||.B-th c;
    case c'
    | in2.Sum leyx =>
      case ! leyx @ op!ToOp?false.B-th ltxy | {} end
    | in1.Sum lexy =>
      lezy := isT z x y lezx lexy;
      case ! lezy @ op!ToOp?false.B-th ltyz | {} end
    end
end


val (.ltIsTransitive?#Ordering?) [A : Ty] :
  (R : Ordering? A) -> R .lt? .IsTransitive?
let R => x y z ltxy ltyz =>
  R .isOrdering? .ltIsCompatible x z .rew (?) of
  leToLtIsTransitive?
    (R .le?) (R .isOrdering? .leIsTotalPreorder)
    x y z
    (R .isOrdering? .ltIsCompatible x y .resp (?) ltxy)
    (R .isOrdering? .ltIsCompatible y z .resp (?) ltyz)


val (.ltLeToLt?#Ordering?) [A : Ty] :
  (R : Ordering? A) &
  (x y z : A) &
  ? R .lt? x y &
  ? R .le? y z ->
  ? R .lt? x z
let R x y z ltxy leyz =>
  R .isOrdering? .ltIsCompatible x z .rew (?) of
  R .le? z x .ind
    (b => (? b -> Empty) -> ? ! b)
    (const refl)
    (c => c refl .rec)
    contra
where
  val contra : ? R .le? z x -> Empty
  let lezx =>
    a := R .leIsTransitive? y z x leyz lezx;
    ltxy' := R .isOrdering? .ltIsCompatible x y .resp (?) ltxy;
    b := op!ToOp?false.B-th ltxy';
    case ! a @ b | {} end
end


val (.leLtToLt?#Ordering?) [A : Ty] :
  (R : Ordering? A) &
  (x y z : A) &
  ? R .le? x y &
  ? R .lt? y z ->
  ? R .lt? x z
let R x y z lexy ltyz =>
  R .isOrdering? .ltIsCompatible x z .rew (?) of
  R .le? z x .ind
    (b => (? b -> Empty) -> ? ! b)
    (const refl)
    (c => c refl .rec)
    contra
where
  val contra : ? R .le? z x -> Empty
  let lezx =>
    a := R .leIsTransitive? z x y lezx lexy;
    ltyz' := R .isOrdering? .ltIsCompatible y z .resp (?) ltyz;
    b := op!ToOp?false.B-th ltyz';
    case ! a @ b | {} end
end


val (.cmpEqIsEq?#Ordering?) [A : Ty] :
  (R : Ordering? A) & (x y : A) -> R .cmp x y .eq? = R .eq? x y
let R x y =>
  R .isOrdering? .cmpIsCompatible x y .rewL (t => t .eq?) of
  (p => p @ ! R .isOrdering? .eqIsCompatible x y) of
  leToCmpEqIsOp&& (R .le? x y) (R .le? y x)
where
  val leToCmpEqIsOp&& :
    (a : Bool) & (b : Bool) ->
    leToCmpImpl.Ord? a b .eq? = a && b
  let false _ => refl
  let true false => refl
  let true true => refl
end


val (.cmpLtIsLt?#Ordering?) [A : Ty] :
  (R : Ordering? A) & (x y : A) -> R .cmp x y .lt? = R .lt? x y
let R x y =>
  R .isOrdering? .cmpIsCompatible x y .rewL(t => t .lt?) of
  (p => p @ ! R .isOrdering? .ltIsCompatible x y) of
  leToCmpLtIsOp! (R .le? x y) (R .le? y x) of c =>
    case pullOutOp||.B-th (R .leIsConnex? x y)
    | in1.Sum h => case ! h @ op!ToOp?false.B-th c | {} end
    | in2.Sum h => h
    end
where
  val leToCmpLtIsOp! :
    (a : Bool) & (b : Bool) & (? ! a -> ? b) ->
    leToCmpImpl.Ord? a b .lt? = ! b
  let false false c => case c refl | {} end
  let false true _ => refl
  let true false _ => refl
  let true true _ => refl
end


val (.cmpLtIsGt?#Ordering?) [A : Ty] :
  (R : Ordering? A) & (x y : A) -> R .cmp x y .lt? = R .cmp y x .gt?
let R x y =>
  R .isOrdering? .cmpIsCompatible x y .rewL(t => t .lt?) of
  R .isOrdering? .cmpIsCompatible y x .rewR(t => t .gt?) of
  ltIsGt (R .le? x y) (R .le? y x) (R .isOrdering? .leIsConnex? x y)
where
  val ltIsGt :
    (a : Bool) & (b : Bool) & ? (a || b) ->
    leToCmpImpl.Ord? a b .lt? = leToCmpImpl.Ord? b a .gt?
  let false false {}
  let false true _ => refl
  let true false _ => refl
  let true true _ => refl
end


val (.eqToLe#Ordering?) [A : Ty] :
  (R : Ordering? A) & (x y : A) & ? R .eq? x y -> ? R .le? x y
let R x y eqxy =>
  eqxy' := R .isOrdering? .eqIsCompatible x y .resp (?) eqxy;
  pullOutOp&&.B-th eqxy' .1

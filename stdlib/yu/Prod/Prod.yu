import DProd => yu/DProd/DProd
| DProd
export
| ($#)
| (...#DProd)
| pair=

import Fun => yu/basic/Fun


val (&&#Ty) : Ty & Ty -> Ty
let A B => &:.DProd const.Fun [B := A] B


val (<->#Ty) : Ty & Ty -> Ty
let A B => (A -> B) && (B -> A)


val (.map#DProd) [X A B : Ty] : X && A & (A -> B) -> X && B
let (x $ a) f => x $ f a

import Fun => yu/basic/Fun

import Bool => yu/Bool/Bool
of Bool


data Option : Ty -> Ty
of no [A : Ty] : ? A
of yes [A : Ty] : A -> ? A


val (?#Ty) : Ty -> Ty
let => Option


val (.isNo#Option) [A : Ty] : ? A -> Bool
let (no) => true.Bool
let (yes(_)) => false.Bool


val (.isYes#Option) [A : Ty] : ? A -> Bool
let => (!.Bool) @compose.Fun (.isNo#Option)


val (>>=#Option) [A B : Ty] : ? A & (A -> ? B) -> ? B
let no _ => no
let (yes a) f => f a


val (.map#Option) [A B : Ty] : ? A & (A -> B) -> ? B
let x f => x >>= yes @compose.Fun f

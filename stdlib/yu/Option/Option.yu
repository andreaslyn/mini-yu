import "yu/basic/Fun.yu"
import "yu/Bool/Bool.yu"


data Option : Ty -> Ty
let no [A : Ty] : ? A
let yes [A : Ty] : A -> ? A


val (?_\Ty) : Ty -> Ty
let => Option


val _.isNo\Option [A : Ty] : ? A -> Bool
let (no) => true
let (yes(_)) => false


val _.isYes\Option [A : Ty] : ? A -> Bool
let => (!_) @compose _.isNo\Option


val _>>=_\Option [A B : Ty] : ? A & (A -> ? B) -> ? B
let no _ => no
let (yes a) f => f a


val _.map\Option [A B : Ty] : ? A & (A -> B) -> ? B
let x f => x >>= yes @compose f

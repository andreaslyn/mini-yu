import Eq => yu/basic/Equal
of (=#)
of refl


data DProd [A : Ty] : (B : A -> Ty) -> Ty
of ($#) [A : Ty] [B : A -> Ty] : (a : A) & B a -> &: B


val (&:#Ty) [A : Ty] : (B : A -> Ty) -> Ty
let => DProd


val (.1#DProd) [A : Ty] [B : A -> Ty] : &: B -> A
let (a $ _) => a


val (.2#DProd) [A : Ty] [B : A -> Ty] : (d : &: B) -> B (d .1)
let (_ $ b) => b


val pair= [A : Ty] [B : A -> Ty] [x y : A] [r : B(x)] [s : B(y)] :
  x = y & r = s -> (x $ r) = (y $ s)
let refl refl => refl


val (.mapD#DProd) [X : Ty] [A B : X -> Ty] :
  &: A & ((x : X) & A x -> B x) -> &: B
let (x $ a) f => x $ f x a

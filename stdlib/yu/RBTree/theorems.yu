import RB => yu/RBTree/RBTree
of RBTree
of (...#RBTree)
of (...#Color.RB)

import Ord? => yu/Ordering?/Ordering?
of Ordering?
of (...#Ordering?)

import L => yu/List/List
of List
of (...#List)

import N => yu/Nat/Nat
of Nat
of (...#Nat)

import B => yu/Bool/Bool
of Bool
of (...#Bool)


val (.rootColor#RBTree) [A : Ty] [od : Ordering? A] :
  RBTree A od -> Color.RB
let leaf.RB => black.RB
let (_ .node _ _ c) => c


val (.pathCountBlackNodes#RBTree) [A : Ty] [od : Ordering? A] :
  RBTree A od -> List Nat
let leaf.RB => 0.N :: nil.L
let (t1 .node t2 _ red.RB) =>
  t1 .pathCountBlackNodes :+: t2 .pathCountBlackNodes
let (t1 .node t2 _ black.RB) =>
  (t1 .pathCountBlackNodes :+: t2 .pathCountBlackNodes) .map (++)


val (.blackInvariant#RBTree) [A : Ty] [od : Ordering? A] :
  RBTree A od -> Bool
let t =>
  case t .pathCountBlackNodes
  of nil.L => true.B
  of n :: ns => ns .accum true.B at a x => a && (x =? n)
  end


val (.redInvariant#RBTree) [A : Ty] [od : Ordering? A]
  : RBTree A od -> Bool
let leaf.RB => true.B
let (t1 .node t2 _ black.RB) =>
  t1 .redInvariant && t2 .redInvariant
let (t1 .node t2 _ red.RB) =>
  t1 .rootColor .black? &&
  t2 .rootColor .black? &&
  t1 .redInvariant &&
  t2 .redInvariant


val (.invariant#RBTree) [A : Ty] [od : Ordering? A]
  : RBTree A od -> Bool
let t => t .blackInvariant && t .redInvariant


import Ord? => yu/Ordering?/Ordering?
of Ordering?
of (...#Ordering?)

import L => yu/basic/List
of List
of (...#List)

import N => yu/Nat/Nat
of Nat
of (...#Nat)

import B => yu/Bool/Bool
of Bool
of false
of true
of (...#Bool)

import Ord => yu/Order/Order
of Order
of (...#Order)

import Eq => yu/basic/Equal
of (=#)
of refl


data Color : Ty
of black : Color
of red : Color


val (.red?#Color) : Color -> Bool
let black => false
let red => true

val (.black?#Color) : Color -> Bool
let black => true
let red => false


data RBTree : (A : Ty) & Ordering? A -> Ty
of leaf [A : Ty] [od : Ordering? A] : RBTree A od
of (.node#RBTree) [A : Ty] [od : Ordering? A] :
  RBTree A od & RBTree A od & A & Color -> RBTree A od


data (.IsNode#RBTree) [A : Ty] [od : Ordering? A] : RBTree A od -> Ty
of mkIsNode [A : Ty] [od : Ordering? A]
    [t1 : RBTree A od] [t2 : RBTree A od] [x : A] [c : Color] :
  t1 .node t2 x c .IsNode


val (.balanceLeft#RBTree) [A : Ty] [od : Ordering? A] :
  RBTree A od & RBTree A od & A & Color -> RBTree A od
let (s1 .node s2 x red .node t1 y red) t2 z _ =>
  s1 .node s2 x black .node (t1 .node t2 z black) y red
let (t1 .node (s1 .node s2 x red) y red) t2 z _ =>
  t1 .node s1 y black .node (s2 .node t2 z black) x red
let t1 t2 z c => t1 .node t2 z c


val (.balanceRight#RBTree) [A : Ty] [od : Ordering? A] :
  RBTree A od & RBTree A od & A & Color -> RBTree A od
let t1 (s1 .node s2 x red .node t2 y red) z _ =>
  t1 .node s1 z black .node (s2 .node t2 y black) x red
let t1 (t2 .node (s1 .node s2 x red) y red) z _ =>
  t1 .node t2 z black .node (s1 .node s2 x black) y red
let t1 t2 z c => t1 .node t2 z c


val (.balanceInsert#RBTree) [A : Ty] [od : Ordering? A] :
  RBTree A od & A -> RBTree A od
let leaf y => leaf .node leaf y red
let (t1 .node t2 x c) y =>
  t1 .balanceInsertOrder t2 x c y (od .cmp x y)


val (.balanceInsertOrder#RBTree) [A : Ty] [od : Ordering? A] :
  RBTree A od & RBTree A od & A & Color & A & Order -> RBTree A od
let t1 t2 x c y lt.Ord => t1 .balanceRight (t2 .balanceInsert y) x c
let t1 t2 x c y eq.Ord => t1 .node t2 x c
let t1 t2 x c y gt.Ord => t1 .balanceInsert y .balanceLeft t2 x c


val (.insert#RBTree) [A : Ty] [od : Ordering? A] :
  RBTree A od & A -> RBTree A od
let t x => colorRootBlack (t .balanceInsert x)
where
  val colorRootBlack : RBTree A od -> RBTree A od
  let leaf => leaf
  let (t1 .node t2 y _) => t1 .node t2 y black
end


val fromList [A : Ty] [od : Ordering? A] :
  List A -> RBTree A od
let => aux leaf
where
  val aux : RBTree A od & List A -> RBTree A od
  let t nil.L => t
  let t (x :: xs) => aux (t .insert x) xs
end


val (.member#RBTree) [A : Ty] [od : Ordering? A] :
  RBTree A od & A -> Bool
let leaf _ => false
let (t1 .node t2 x _) y => od .eq? x y || t1 .member y || t2 .member y


val test : at
  xs := 1.N :: 6.N :: 5.N :: 4.N :: 6.N :: 1.N :: 3.N :: 2.N :: nil.L;
  f := fromList [od := ordering?.N];
  ? at
    f xs .member 1.N && f xs .member 2.N && f xs .member 3.N &&
    f xs .member 4.N && f xs .member 5.N && f xs .member 6.N &&
    ! f xs .member 0.N && ! f xs .member 7.N
let => refl

import Order => yu/Order/Order
| (...)

import basic => yu/basic
| (...)


val (.notLtIsEqOrGt#Order) : (c : Order) -> ! c .lt? = c .eq? || c .gt?
let lt => refl
let eq => refl
let gt => refl


val (.notEqIsLtOrGt#Order) : (c : Order) -> ! c .eq? = c .lt? || c .gt?
let lt => refl
let eq => refl
let gt => refl


val (.notGtIsLtOrEq#Order) : (c : Order) -> ! c .gt? = c .lt? || c .eq?
let lt => refl
let eq => refl
let gt => refl


val (.lt?ToOp=#Order) : (c : Order) & ? c .lt? -> c = lt
let lt _ => refl
let eq {}
let gt {}


val (.eq?ToOp=#Order) : (c : Order) & ? c .eq? -> c = eq
let lt {}
let eq _ => refl
let gt {}


val (.gt?ToOp=#Order) : (c : Order) & ? c .gt? -> c = gt
let lt {}
let eq {}
let gt _ => refl

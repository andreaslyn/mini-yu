import basic => yu/basic
of (...)


data Order : Ty
of lt : Order
of eq : Order
of gt : Order

val (.lt?#Order) : Order -> Bool
let lt => true
let _ => false

val (.eq?#Order) : Order -> Bool
let eq => true
let _ => false

val (.gt?#Order) : Order -> Bool
let gt => true
let _ => false


val (.ind#Order) :
  (c : Order) & (P : Order -> Ty) &
    (() -> P lt) & (() -> P eq) & (() -> P gt) -> P c
let lt P x _ _ => x ()
let eq P _ y _ => y ()
let gt P _ _ z => z ()


val (.rec#Order) [A : Ty] : Order & (() -> A) & (() -> A) & (() -> A) -> A
let c x y z => c .ind (const A) (x ()) (y ()) (z ())


import B => yu/Bool/Bool
of Bool

import relation? => yu/relation?/relation?
of (...#Bool)

import Prod => yu/Prod
of (...#DProd.Prod)


data Equivalence? : Ty -> Ty
of mk [A : Ty] :
  (R : A & A -> Bool) & R .IsEquivalence? -> Equivalence? A


val (.eq?#Equivalence?) [A : Ty] : Equivalence? A -> A & A -> Bool
let (mk R _) => R


val (.neq?#Equivalence?) [A : Ty] : Equivalence? A -> A & A -> Bool
let E => x y => !.B E .eq? x y


val (.isEquivalence#Equivalence?) [A : Ty] :
  (E : Equivalence? A) -> E .eq? .IsEquivalence?
let (mk _ isR) => isR

val (.isSymmetric#Equivalence?) [A : Ty] :
  (E : Equivalence? A) -> E .eq? .IsSymmetric?
let E => E .isEquivalence .1

val (.isReflexive#Equivalence?) [A : Ty] :
  (E : Equivalence? A) -> E .eq? .IsReflexive?
let E => E .isEquivalence .2 .1

val (.isTransitive#Equivalence?) [A : Ty] :
  (E : Equivalence? A) -> E .eq? .IsTransitive?
let E => E .isEquivalence .2 .2

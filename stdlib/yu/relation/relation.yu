import basic => yu/basic
| (...)

import Prod => yu/Prod/Prod
| ($#)
| (...#Ty)

import Sum => yu/Sum/Sum
| (...#Ty)


val (.IsReflexive#Ty) [A : Ty] : (A & A -> Ty) -> Ty
let R => (x : A) -> R x x


val (.IsIrreflexive#Ty) [A : Ty] : (A & A -> Ty) -> Ty
let (R) => (x : A) -> ! R x x


val (.IsSymmetric#Ty) [A : Ty] : (A & A -> Ty) -> Ty
let R => (x y : A) & R x y -> R y x


val (.IsAsymmetric#Ty) [A : Ty] : (A & A -> Ty) -> Ty
let R => (x y : A) & R x y -> ! R y x


val (.IsAntisymmetric#Ty) [A : Ty] : (A & A -> Ty) -> Ty
let R => (x y : A) & R x y & R y x -> x = y


val (.IsTransitive#Ty) [A : Ty] : (A & A -> Ty) -> Ty
let R => (x y z : A) & R x y & R y z -> R x z


val (.IsConnex#Ty) [A : Ty] : (A & A -> Ty) -> Ty
let R => (x y : A) -> R x y || R y x


val (.IsPreorder#Ty) [A : Ty] : (A & A -> Ty) -> Ty
let R => R .IsReflexive && R .IsTransitive


val (.IsEquivalence#Ty) [A : Ty] : (A & A -> Ty) -> Ty
let R => R .IsSymmetric && R .IsPreorder


val (.IsPartialOrder#Ty) [A : Ty] : (A & A -> Ty) -> Ty
let R => R .IsAntisymmetric && R .IsPreorder

import CharType => yu/Char/Type
export
| (...)

import Ord => yu/Order/Order
| Order
| (...#Order)

import basic => yu/basic
| Bool
| (=#)

import relation? => yu/relation?/relation?
| (...#Bool)

import Eq? => yu/Equivalence?/Equivalence?
| Equivalence?
| (...#Equivalence?)

import Ord? => yu/Ordering?/Ordering?
| Ordering?
| (...#Ordering?)

import Ord?-th => yu/Ordering?/theorems

data (.IsDigit#Char) : Char -> Ty
| 0IsDigit : '0 .IsDigit
| 1IsDigit : '1 .IsDigit
| 2IsDigit : '2 .IsDigit
| 3IsDigit : '3 .IsDigit
| 4IsDigit : '4 .IsDigit
| 5IsDigit : '5 .IsDigit
| 6IsDigit : '6 .IsDigit
| 7IsDigit : '7 .IsDigit
| 8IsDigit : '8 .IsDigit
| 9IsDigit : '9 .IsDigit


val (.toUpper#Char) : Char -> Char
let ('a) => 'A
let ('b) => 'B
let ('c) => 'C
let ('d) => 'D
let ('e) => 'E
let ('f) => 'F
let ('g) => 'G
let ('h) => 'H
let ('i) => 'I
let ('j) => 'J
let ('k) => 'K
let ('l) => 'L
let ('m) => 'M
let ('n) => 'N
let ('o) => 'O
let ('p) => 'P
let ('q) => 'Q
let ('r) => 'R
let ('s) => 'S
let ('t) => 'T
let ('u) => 'U
let ('v) => 'V
let ('w) => 'W
let ('x) => 'X
let ('y) => 'Y
let ('z) => 'Z
let (c) => c


val (.toLower#Char) : Char -> Char
let ('A) => 'a
let ('B) => 'b
let ('C) => 'c
let ('D) => 'd
let ('E) => 'e
let ('F) => 'f
let ('G) => 'g
let ('H) => 'h
let ('I) => 'i
let ('J) => 'j
let ('K) => 'k
let ('L) => 'l
let ('M) => 'm
let ('N) => 'n
let ('O) => 'o
let ('P) => 'p
let ('Q) => 'q
let ('R) => 'r
let ('S) => 's
let ('T) => 't
let ('U) => 'u
let ('V) => 'v
let ('W) => 'w
let ('X) => 'x
let ('Y) => 'y
let ('Z) => 'z
let (c) => c


extern (.cmp#Char) : Char & Char -> Order

extern cmpIsTransitive? :
  cmpToLe?.Ord? (.cmp#Char) .IsTransitive?

extern cmpIsCompatible :
  (b : Char) & (c : Char) -> b .cmp c .lt? = c .cmp b .gt?

val ordering? : Ordering? Char
let => fromCmp.Ord? (.cmp) cmpIsTransitive? cmpIsCompatible

val equivalence? : Equivalence? Char
let => ordering? .equivalence?.Ord?-th

val (<?#Char) : Char & Char -> Bool
let => ordering? .lt?

val (<=?#Char) : Char & Char -> Bool
let => ordering? .le?

val (>?#Char) : Char & Char -> Bool
let => ordering? .gt?

val (>=?#Char) : Char & Char -> Bool
let => ordering? .ge?

val (=?#Char) : Char & Char -> Bool
let => equivalence? .eq?

val (!=?#Char) : Char & Char -> Bool
let => equivalence? .neq?

import "yu/Nat/Nat.yu"


data _Vec\Ty : (Ty, Nat) -> Ty
let nil.Vec[A : Ty] : A Vec(0)
let _::_\_Vec\Ty[A : Ty, n : Nat] : (A, A Vec(n)) -> A Vec(++ n)


val _head\_Vec\Ty[A : Ty, n : Nat] : A Vec(++ n) -> A
let (x :: _) => x


val _tail\_Vec\Ty[A : Ty, n : Nat] : A Vec(++ n) -> A Vec(n)
let (_ :: xs) => xs


val _accum\_Vec\Ty[A : Ty, B : Ty, n : Nat] :
  (B Vec(n), A, (A, B) -> A) -> A
let (nil.Vec, a, _) => a
let (x :: xs, a, f) => xs accum(f(a, x), f)


val _map\_Vec\Ty[A : Ty, B : Ty, n : Nat] : (A Vec(n), A -> B) -> B Vec(n)
let (nil.Vec, _) => nil.Vec
let (x :: xs, f) => f(x) :: xs map(f)


val _index\_Vec\Ty[A : Ty, n : Nat] : (A Vec(n), i : Nat, ?(i <? n)) -> A
let (nil.Vec, 0, ())
let (nil.Vec, ++ _, ())
let (x :: xs, 0, _) => x
let (_ :: xs, ++ i, L) => xs index(i, L)

import "yu/Nat/theorems.yu"
import "IsNat.yu"


val nat.IsNat : Nat IsNat
let => mk.IsNat(0, ++ _, _ind, (_, _, _). refl, (_, _, _, _). refl)


val plusIsOp+r.IsNat : (m : Nat, n : Nat) -> nat.IsNat plus(m, n) = m +r n
let (m, 0) => refl
let (m, ++ n) => plusIsOp+r.IsNat(m, n) ap(++ _)

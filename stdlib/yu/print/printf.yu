import "yu/print/print.yu"
import "yu/Str/Format.yu"


val _.Printf\PreFormat.Str : PreFormat.Str -> Ty
let (natPreFormat.Str p) => Nat ->> p .Printf
let (strPreFormat.Str p) => Str ->> p .Printf
let (charPreFormat.Str p) => Char ->> p .Printf
let (boolPreFormat.Str p) => Bool ->> p .Printf
let (constPreFormat.Str _ p) => p .Printf
let errorPreFormat.Str => {}
let nilPreFormat.Str => {}


val _.Printf\Str : Str -> Ty
let s => s .preFormat .Printf


val printfAccum.print : (p : PreFormat.Str) & ({} ->> {}) ->> p .Printf
let (natPreFormat.Str p) a =>
  n => printfAccum.print p (_ => a (); n .print) 
let (strPreFormat.Str p) a =>
  s => printfAccum.print p (_ => a (); s .print)
let (charPreFormat.Str p) a =>
  c => printfAccum.print p (_ => a (); c .print)
let (boolPreFormat.Str p) a =>
  b => printfAccum.print p (_ => a (); b .print)
let (constPreFormat.Str c p) a =>
  printfAccum.print p (_ => a (); c .print)
let errorPreFormat.Str _ => ()
let nilPreFormat.Str a => a ()


val _.printf\PreFormat.Str : (p : PreFormat.Str) ->> p .Printf
let p => printfAccum.print p (_ => ())


val _.printf\Str : (s : Str) ->> s .Printf
let s => s .preFormat .printf
